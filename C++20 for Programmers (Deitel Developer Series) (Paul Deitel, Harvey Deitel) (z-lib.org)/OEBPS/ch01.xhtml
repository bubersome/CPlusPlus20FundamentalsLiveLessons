<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><h2 class="h2" id="ch01">Chapter 1. Introduction and Test-Driving a C++ Application</h2>&#13;
<div class="image"><img src="Images/ch01.jpg" alt="Images" width="657" height="862"/></div>&#13;
<div class="objective">&#13;
<p class="objt">Objectives</p>&#13;
<p class="objp">In this chapter, you’ll do one or more of the following:</p>&#13;
<p class="squ"><span class="red">■</span> Test-drive a C++20 application in the Visual C++ compiler in Microsoft Visual Studio Community edition on Windows.</p>&#13;
<p class="squ"><span class="red">■</span> Test-drive a C++20 application in the Clang compiler in Xcode on macOS.</p>&#13;
<p class="squ"><span class="red">■</span> Test-drive a C++20 application in the GNU C++ compiler on Linux.</p>&#13;
<p class="squ"><span class="red">■</span> Test-drive a C++20 application in the GNU Compiler Collection (GCC) Docker Container in Docker running natively over Windows 10, macOS and/or Linux.</p>&#13;
</div>&#13;
<div class="box">&#13;
<p class="chap-lev1"><a href="ch01.xhtml#ch01lev1sec1"><span class="violet"><strong>1.1</strong></span> Introduction</a></p>&#13;
<p class="chap-lev1"><a href="ch01.xhtml#ch01lev1sec2"><span class="violet"><strong>1.2</strong></span> Test-Driving a C++20 Application</a></p>&#13;
<p class="chap-lev2"><a href="ch01.xhtml#ch01lev2sec1">1.2.1 Compiling and Running a C++20 Application with Visual Studio 2019 Community Edition on Windows 10</a></p>&#13;
<p class="chap-lev2"><a href="ch01.xhtml#ch01lev2sec2">1.2.2 Compiling and Running a C++20 Application with Xcode on macOS</a></p>&#13;
<p class="chap-lev2"><a href="ch01.xhtml#ch01lev2sec3">1.2.3 Compiling and Running a C++20 Application with GNU C++ on Linux</a></p>&#13;
<p class="chap-lev2"><a href="ch01.xhtml#ch01lev2sec4">1.2.4 Compiling and Running a C++20 Application with GNU C++ in the GCC Docker Container in Docker Running Natively Over Windows 10, macOS and/or Linux</a></p>&#13;
</div>&#13;
<h3 class="h3" id="ch01lev1sec1"><span class="violet">1.1</span> Introduction</h3>&#13;
<p>Welcome to C++—one of the world’s most widely used, high-performance, computer-programming languages—and its current version C++20.</p>&#13;
<p>If you’re reading this, you’re on the O’Reilly Online Learning platform (formerly called Safari) viewing an early-access Rough Cut of our forthcoming book <em>C++20 for Programmers</em>, scheduled for publication this summer. <strong>We have prepared this content carefully, but it has not yet been peer reviewed or copy edited and is subject to change.</strong> When we complete this chapter, we’ll post the reviewed and copy edited version here.</p>&#13;
<p>Please send any corrections, comments, questions and suggestions for improvement to <code><a href="mailto:paul@deitel.com">paul@deitel.com</a></code> and I’ll respond promptly. Check for updates here and on the book’s web page:</p>&#13;
<pre class="pre"><a href="https://deitel.com/c-plus-plus-20-for-programmers">https://deitel.com/c-plus-plus-20-for-programmers</a></pre>&#13;
<p>This book is written for developers using one or more of the following popular desktop platforms—Microsoft Windows 10, macOS and Linux. We tested every program on three popular free compilers:</p>&#13;
<p class="bull">• Visual C++ in Microsoft Visual Studio Community edition on Windows 10,</p>&#13;
<p class="bull">• Clang in Xcode on macOS, and</p>&#13;
<p class="bull">• GNU C++ on Linux and in the GNU Compiler Collection (GCC) Docker container.<sup><a id="rch0fn1" href="ch01.xhtml#ch0fn1">1</a></sup></p>&#13;
<p class="footnote"><a id="ch0fn1" href="ch01.xhtml#rch0fn1">1</a>. At Deitel, we use current, powerful multicore Apple Mac computers that enable us to run macOS natively, and Windows 10 and Linux through virtual machines in VMWare Fusion. Docker runs natively on Windows, macOS and Linux systems.</p>&#13;
<p>This early-access version of <a href="ch01.xhtml#ch01">Chapter 1</a> contains test-drives demonstrating how to compile and run a C++20 application using these compilers and platforms. The published version of this chapter will contain additional introductory material.</p>&#13;
<p>At the time of this writing, some C++20 features are fully implemented in all three compilers, some are implemented in a subset of the three and some are not implemented at all. We point out these issues as appropriate and will update our online content as the compiler vendors implement the rest of C++20’s features. C++20 compiler support for many more compilers is tracked at:</p>&#13;
<pre class="pre"><a href="https://en.cppreference.com/w/cpp/compiler_support">https://en.cppreference.com/w/cpp/compiler_support</a></pre>&#13;
<h5 class="h5" id="ch01lev3sec1">“Sneak Peek” Videos for O’Reilly Online Learning Subscribers</h5>&#13;
<p>As an O’Reilly Online Learning subscriber, you also have access to the “sneak peek” of our new <em>C++20 Fundamentals LiveLessons</em> videos at:</p>&#13;
<pre class="pre"><a href="https://learning.oreilly.com/videos/c-20-fundamentals-parts/9780136875185">https://learning.oreilly.com/videos/c-20-fundamentals-parts/9780136875185</a></pre>&#13;
<p>Co-author Paul Deitel immediately records each video lesson as we complete the corresponding chapter. Lessons go live on O’Reilly Online Learning a few days later. Again, check here frequently for updates.</p>&#13;
<h3 class="h3" id="ch01lev1sec2"><span class="violet">1.2</span> Test-Driving a C++20 Application</h3>&#13;
<p>In this section, you’ll compile, run and interact with your first C++ application—a guess-the-number game, which picks a random number from 1 to 1000 and prompts you to guess it. If you guess correctly, the game ends. If you guess incorrectly, the application indicates whether your guess is higher or lower than the correct number. There’s no limit on the number of guesses you can make.</p>&#13;
<p>Usually, this application randomly selects the correct answer as you execute the program. We’ve disabled that aspect of the application so that it uses the same correct answer every time the program executes (though this may vary by compiler). So, you can use the same guesses we use and see the same results.</p>&#13;
<h5 class="h5" id="ch01lev3sec2">Summary of the Test-Drives</h5>&#13;
<p>We’ll demonstrate running a C++ application using:</p>&#13;
<p class="bull">• Microsoft Visual Studio 2019 Community edition for Windows (<a href="ch01.xhtml#ch01lev2sec1">Section 1.2.1</a>)</p>&#13;
<p class="bull">• Clang in Xcode on macOS (<a href="ch01.xhtml#ch01lev2sec2">Section 1.2.2</a>).</p>&#13;
<p class="bull">• GNU C++ in a shell on Linux (<a href="ch01.xhtml#ch01lev2sec3">Section 1.2.3</a>)</p>&#13;
<p class="bull">• GNU C++ in a shell running inside the GNU Compiler Collection (GCC) Docker container. This requires Docker to be installed and running.</p>&#13;
<p>You need to read only the section that corresponds to your platform. At the time of this writing, GNU C++ supports the most C++20 features of the three compilers we use.</p>&#13;
<h4 class="h4" id="ch01lev2sec1">1.2.1 Compiling and Running a C++20 Application with Visual Studio 2019 Community Edition on Windows 10</h4>&#13;
<p>In this section, you’ll run a C++ program on Windows using Microsoft Visual Studio 2019 Community edition. There are several versions of Visual Studio available—on some versions, the options, menus and instructions we present might differ slightly. From this point forward, we'll simply say “Visual Studio” or “the IDE.”</p>&#13;
<h5 class="h5" id="ch01lev3sec3">Step 1: Checking Your Setup</h5>&#13;
<p>If you have not already done so, read the Before You Begin section of this book for instructions on installing the IDE and downloading the book’s code examples.</p>&#13;
<h5 class="h5" id="ch01lev3sec4">Step 2: Launching Visual Studio</h5>&#13;
<p>Open Visual Studio from the <span class="std">Start</span> menu. The IDE displays the following <span class="std">Visual Studio 2019</span> window containing:</p>&#13;
<div class="image"><img src="Images/01unfig01.jpg" alt="Images" width="768" height="469"/></div>&#13;
<p>Close this window for now by clicking the <span class="std">X</span> in its tab—you can access this window any time by selecting <span class="std">File &gt; Start Window</span>. We use the <span class="std">&gt;</span> character to indicate selecting a menu item from a menu. For example, the notation <span class="std">File &gt; Open</span> indicates that you should select the <span class="std">Open</span> menu item from the <span class="std">File</span> menu.</p>&#13;
<h5 class="h5" id="ch01lev3sec5">Step 3: Creating a Project</h5>&#13;
<p>A <span class="violet"><strong>project</strong></span> is a group of related files, such as the C++ source-code files that compose an application. Visual Studio organizes applications into projects and <span class="violet"><strong>solutions</strong></span>, which contain one or more projects. Multiple-project solutions are used to create large-scale applications. Each application in this book requires only a single-project solution.</p>&#13;
<p>To work our code examples, you’ll begin with an <span class="std">Empty Project</span> and add files to it. To create a project:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> Select <span class="std">File &gt; New &gt; Project…</span> to display the <span class="std">Create a New Project</span> dialog:</p>&#13;
<div class="image"><img src="Images/01unfig02.jpg" alt="Images" width="769" height="511"/></div>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> In the preceding dialog, select the <span class="std">Empty Project</span> template with the tags <span class="std">C++</span>, <span class="std">Windows</span> and <span class="std">Console</span>. This template is for programs that execute at the command line in a Command Prompt window. Depending on the version of Visual Studio you’re using and the options you have installed, there may be many other project templates installed. You can narrow down your choices using the <span class="std">Search for templates</span> textbox and the drop-down lists below it. Click <span class="std">Next</span> to display the <span class="std">Configure your new project</span> dialog:</p>&#13;
<div class="image"><img src="Images/01unfig03.jpg" alt="Images" width="769" height="510"/></div>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> Provide a <span class="std">Project name</span> and <span class="std">Location</span> for your project. For the <span class="std">Project name</span>, we specified <code>cpp20_test</code>. For the <span class="std">Location</span>, we selected the <code>examples</code> folder containing this book’s code examples. Click <span class="std">Create</span> to open your new project in Visual Studio.</p>&#13;
<p>At this point, the Visual Studio creates your project, places its folder in</p>&#13;
<p class="web"><code>C:\Users\</code><em>YourUserAccount</em><code>\Documents\examples</code></p>&#13;
<p>(or the folder you specified) and opens the main window:</p>&#13;
<div class="image"><img src="Images/01unfig04.jpg" alt="Images" width="773" height="350"/></div>&#13;
<p>This window displays editors as tabbed windows (one for each file) when you’re editing code. On the left side is the <span class="std">Solution Explorer</span> for viewing and managing your application’s files. In this book’s examples, you’ll typically place each program’s code files in the <span class="std">Source Files</span> folder. If the <span class="std">Solution Explorer</span> is not displayed, you can display it by selecting <span class="std">View &gt; Solution Explorer</span>.</p>&#13;
<h5 class="h5" id="ch01lev3sec6">Step 4: Adding the <code>GuessNumber.cpp</code> File into the Project</h5>&#13;
<p>Next, you’ll add <code>GuessNumber.cpp</code> to the project you created in <em>Step 3</em>. In the <span class="std">Solution Explorer</span>:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> Right-click the <span class="std">Source Files</span> folder and select <span class="std">Add &gt; Existing Item…</span>.</p>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> In the dialog that appears, navigate to the <code>ch01</code> subfolder of the book’s <code>examples</code> folder, <code>GuessNumber.cpp</code> and click <span class="std">Add</span>.<sup><a id="rch0fn2" href="ch01.xhtml#ch0fn2">2</a></sup></p>&#13;
<p class="footnote"><a id="ch0fn2" href="ch01.xhtml#rch0fn2">2</a>. For the multiple source-code-file programs that you’ll see in later chapters, select all the files for a given program. When you begin creating programs yourself, you can right click the <span class="std">Source Files</span> folder and select <span class="std">Add &gt; New Item…</span> to display a dialog for adding a new file.</p>&#13;
<h5 class="h5" id="ch01lev3sec7">Step 5: Configuring Your Project to Use C++20</h5>&#13;
<p>The Visual C++ compiler in Visual Studio supports several versions of the C++ standard. For this book, we use C++20, which we must configure in our project’s settings:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> Right-click the project’s node—<img class="inline" src="Images/common03.jpg" alt="Images" width="23" height="20"/>—in the Solution Explorer and select <span class="std">Properties</span> to display the project’s <span class="std">cpp20_test Property Pages</span> dialog:</p>&#13;
<div class="image"><img src="Images/01unfig05.jpg" alt="Images" width="787" height="544"/></div>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> In the left column, expand the <span class="std">C/C++</span> node, then select <span class="std">Language</span>.</p>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> In the right column, click in the field to the right of <span class="std">C++ Language Standard</span>, click the down arrow, then select <span class="std">Preview - Features from the Latest C++ Working Draft (/std:c++latest)</span> and click <span class="std">OK</span>. In a future version of Visual Studio, Microsoft will change this option to <span class="std">ISO C++20 Standard (/std:c++20)</span>.</p>&#13;
<h5 class="h5" id="ch01lev3sec8">Step 6: Compiling and Running the Project</h5>&#13;
<p>To compile and run the project so you can test-drive the application, select <span class="std">Debug &gt; Start without debugging</span> or type <em>Ctrl</em> + <em>F5</em>. If the program compiles correctly, Visual Studio opens a Command Prompt window and executes the program. We changed the Command Prompt’s color scheme and font size for readability:</p>&#13;
<div class="image"><img src="Images/01unfig06.jpg" alt="Images" width="493" height="146"/></div>&#13;
<h5 class="h5" id="ch01lev3sec9">Step 7: Entering Your First Guess</h5>&#13;
<p>At the <code>?</code> prompt, type <code><strong>500</strong></code> and press <em>Enter</em>. The application displays <code>"Too high. Try again."</code> to indicate the value you entered is greater than the number the application chose as the correct guess:</p>&#13;
<div class="image"><img src="Images/01unfig07.jpg" alt="Images" width="494" height="146"/></div>&#13;
<h5 class="h5" id="ch01lev3sec10">Step 8: Entering Another Guess</h5>&#13;
<p>At the next prompt, type <code><strong>250</strong></code> and press <em>Enter</em>. The application displays <code>"Too high. Try again."</code>, because the value you entered once again is greater than the correct guess:</p>&#13;
<div class="image"><img src="Images/01unfig08.jpg" alt="Images" width="493" height="219"/></div>&#13;
<h5 class="h5" id="ch01lev3sec11">Step 9: Entering Additional Guesses</h5>&#13;
<p>Continue to play the game by entering values until you guess the correct number. When you guess correctly, the application displays <code>"Excellent! You guessed the number!"</code>:</p>&#13;
<div class="image"><img src="Images/01unfig09.jpg" alt="Images" width="493" height="613"/></div>&#13;
<h5 class="h5" id="ch01lev3sec12">Step 10: Playing the Game Again or Exiting the Application</h5>&#13;
<p>After you guess the correct number, the application asks if you’d like to play another game. At the <code>"Would you like to play again (y or n)?"</code> prompt, entering <code><strong>y</strong></code> causes the application to choose a new number and start a new game. Entering <code><strong>n</strong></code> terminates the application. Each time you execute this application from the beginning (<em>Step 6</em>), it will choose the same numbers for you to guess.</p>&#13;
<h5 class="h5" id="ch01lev3sec13">Reusing This Project for Subsequent Examples</h5>&#13;
<p>You can follow the steps in this section to create a separate project for every application in the book. However, for our examples, you may find it more convenient to remove the current program from the project then add a new one. To remove a file from your project (but not your system), select it in the <span class="std">Solution Explorer</span> then press <em>Del</em> (or <em>Delete</em>). You can then repeat <em>Step 4</em> to add a different program to the project.</p>&#13;
<h4 class="h4" id="ch01lev2sec2">1.2.2 Compiling and Running a C++20 Application with Xcode on macOS</h4>&#13;
<p>In this section, you’ll run a C++ program on a macOS using the Clang compiler in Apple’s Xcode IDE.</p>&#13;
<h5 class="h5" id="ch01lev3sec14">Step 1: Checking Your Setup</h5>&#13;
<p>If you have not already done so, read the Before You Begin section of this book for instructions on installing the IDE and downloading the book’s code examples.</p>&#13;
<h5 class="h5" id="ch01lev3sec15">Step 2: Launching Xcode</h5>&#13;
<p>Open a Finder window, select <span class="std">Applications</span> and double-click the Xcode icon (<img class="inline" src="Images/common04.jpg" alt="Images" width="28" height="26"/>). If this is your first time running Xcode, the <span class="std">Welcome to Xcode</span> window appears:</p>&#13;
<div class="image"><img src="Images/01unfig10.jpg" alt="Images" width="670" height="393"/></div>&#13;
<p>Close this window by clicking the <span class="std">X</span> in the upper left corner—you can access it any time by selecting <span class="std">Window &gt; Welcome to Xcode</span>. We use the <span class="std">&gt;</span> character to indicate selecting a menu item from a menu. For example, the notation <span class="std">File &gt; Open…</span> indicates that you should select the <span class="std">Open…</span> menu item from the <span class="std">File</span> menu.</p>&#13;
<h5 class="h5" id="ch01lev3sec16">Step 3: Creating a Project</h5>&#13;
<p>A <span class="violet"><strong>project</strong></span> is a group of related files, such as the C++ source-code files that compose an application. The Xcode projects we created for this book’s examples are <span class="std">Command Line Tool</span> projects that you’ll execute directly in the IDE. To create a project:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> Select <span class="std">File &gt; New &gt; Project…</span>.</p>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> At the top of the <span class="std">Choose a template for your new project</span> dialog, click <span class="std">macOS</span>.</p>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> Under <span class="std">Application</span>, click <span class="std">Command Line Tool</span> and click <span class="std">Next</span>.</p>&#13;
<p class="num"><span class="red"><strong>4.</strong></span> For <span class="std">Product Name</span>, enter a name for your project—we specified <code>cpp20_test</code>.</p>&#13;
<p class="num"><span class="red"><strong>5.</strong></span> In the <span class="std">Language</span> drop-down list, select <span class="std">C++</span> then click <span class="std">Next</span>.</p>&#13;
<p class="num"><span class="red"><strong>6.</strong></span> Specify where you want to save your project. We selected the <code>examples</code> folder containing this book’s code examples.</p>&#13;
<p class="num"><span class="red"><strong>7.</strong></span> Click <span class="std">Create</span>.</p>&#13;
<p>Xcode creates your project and displays the <span class="violet"><strong>workspace window</strong></span> initially showing three areas—the <span class="std"><span class="violet">Navigator</span></span> <span class="violet"><strong>area</strong></span>, <span class="std"><span class="violet">Editor</span></span> <span class="violet"><strong>area</strong></span> and <span class="std"><span class="violet">Utilities</span></span> <span class="violet"><strong>area</strong></span>:</p>&#13;
<div class="image"><img src="Images/01unfig11.jpg" alt="Images" width="791" height="387"/></div>&#13;
<p>The left-side <span class="std">Navigator</span> area has icons at its top for the <em>navigators</em> that can be displayed there. For this book, you’ll primarily work with</p>&#13;
<p class="bull">• <span class="std"><span class="violet">Project</span></span> (<img class="inline" src="Images/common05.jpg" alt="Images" width="26" height="25"/>)—Shows all the files and folders in your project.</p>&#13;
<p class="bull">• <span class="std"><span class="violet">Issue</span></span> (<img class="inline" src="Images/common06.jpg" alt="Images" width="22" height="22"/>)—Shows you warnings and errors generated by the compiler.</p>&#13;
<p>Clicking a navigator button displays the corresponding navigator panel.</p>&#13;
<p>The middle <span class="std">Editor</span> area is for managing project settings and editing source code. This area is always displayed in your workspace window. Selecting a file in the <span class="std">Project</span> navigator, the file’s contents display in the <span class="std">Editor</span> area. You will not use the right-side <span class="std">Utilities</span> area in this book. There’s also a <span class="std"><span class="violet">Debug</span></span> <span class="violet"><strong>area</strong></span> in which you’ll run and interact with the guess-the-number program. This will appear below the <span class="std">Editor</span> area.</p>&#13;
<p>The workspace window’s toolbar contains options for executing a program:</p>&#13;
<div class="image"><img src="Images/01unfig12.jpg" alt="Images" width="408" height="101"/></div>&#13;
<p>displaying the progress of tasks executing in Xcode:</p>&#13;
<div class="image"><img src="Images/01unfig13.jpg" alt="Images" width="647" height="34"/></div>&#13;
<p>and hiding or showing the left (Navigator), right (Utilities) and bottom (Debug) areas:</p>&#13;
<div class="image"><img src="Images/01unfig14.jpg" alt="Images" width="155" height="33"/></div>&#13;
<h5 class="h5" id="ch01lev3sec17">Step 4: Configuring the Project to Compile Using C++20</h5>&#13;
<p>The Clang compiler in Xcode supports several versions of the C++ standard. For this book, we use C++20, which we must configure in our project’s settings:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> In the <span class="std">Project</span> navigator, select your project’s name (<code>cpp20_test</code>).</p>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> In the <span class="std">Editors</span> area’s left side, select your project’s name under <span class="std">TARGET</span>.</p>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> At the top of the <span class="std">Editors</span> area, click <span class="std">Build Settings</span>, and just below it, click <span class="std">All</span>.</p>&#13;
<p class="num"><span class="red"><strong>4.</strong></span> Scroll to the <span class="std">Apple Clang - Language - C++</span> section.</p>&#13;
<p class="num"><span class="red"><strong>5.</strong></span> Click the value to the right of <span class="std">C++ Language Dialect</span> and select <span class="std">Other…</span>.</p>&#13;
<p class="num"><span class="red"><strong>6.</strong></span> In the popup area, replace the current setting with <code>c++2a</code> and press <em>Enter</em>. In a future version of Xcode, Apple will provide a C++20 option for <span class="std">C++ Language Dialect</span>.</p>&#13;
<h5 class="h5" id="ch01lev3sec18">Step 5: Deleting the <code>main.cpp</code> File from the Project</h5>&#13;
<p>By default, Xcode creates a <code>main.cpp</code> source-code file containing a simple program that displays <code>"Hello, World!"</code>. You won’t use <code>main.cpp</code> in this test-drive, so you should delete the file. In the <span class="std">Project</span> navigator, right-click the <code>main.cpp</code> file and select <span class="std">Delete</span>. In the dialog that appears, select <span class="std">Move to Trash</span>. The file will not be removed from your system until you empty your trash.</p>&#13;
<h5 class="h5" id="ch01lev3sec19">Step 6: Adding the <code>GuessNumber.cpp</code> File into the Project</h5>&#13;
<p>In a Finder window, open the <code>ch01</code> folder in the book’s <code>examples</code> folder, then drag <code>GuessNumber.cpp</code> onto the <span class="std">Guess Number</span> folder in the <span class="std">Project</span> navigator. In the dialog that appears, ensure that <span class="std">Copy items if needed</span> is checked, then click <span class="std">Finish</span>.<sup><a id="rch0fn3" href="ch01.xhtml#ch0fn3">3</a></sup></p>&#13;
<p class="footnote"><a id="ch0fn3" href="ch01.xhtml#rch0fn3">3</a>. For the multiple source-code-file programs that you’ll see later in the book, drag all the files for a given program to the project’s folder. When you begin creating your own programs, you can right click the project’s folder and select <span class="std">New File…</span> to display a dialog for adding a new file.</p>&#13;
<h5 class="h5" id="ch01lev3sec20">Step 7: Compiling and Running the Project</h5>&#13;
<p>To compile and run the project so you can test-drive the application, simply click the run (<img class="inline" src="Images/common07.jpg" alt="Images" width="21" height="22"/>) button on Xcode’s toolbar. If the program compiles correctly, Xcode opens the <span class="std">Debug</span> area and executes the program in the right half of the <span class="std">Debug</span> area:</p>&#13;
<div class="image"><img src="Images/01unfig15.jpg" alt="Images" width="603" height="129"/></div>&#13;
<p>The application displays <code>"Please type your first guess."</code>, then displays a question mark (<code>?</code>) as a prompt on the next line.</p>&#13;
<h5 class="h5" id="ch01lev3sec21">Step 8: Entering Your First Guess</h5>&#13;
<p>Click in the <span class="std">Debug</span> area, then type <code><strong>500</strong></code> and press <em>Return</em></p>&#13;
<div class="image"><img src="Images/01unfig16.jpg" alt="Images" width="367" height="125"/></div>&#13;
<p>The application displays <code>"Too low. Try again."</code>, meaning that the value you entered is less than the number the application chose as the correct guess.</p>&#13;
<h5 class="h5" id="ch01lev3sec22">Step 9: Entering Another Guess</h5>&#13;
<p>At the next prompt, enter <code><strong>750</strong></code>:</p>&#13;
<div class="image"><img src="Images/01unfig17.jpg" alt="Images" width="367" height="163"/></div>&#13;
<p>The application displays <code>"Too low. Try again."</code>, because the value you entered once again is less than the correct guess.</p>&#13;
<h5 class="h5" id="ch01lev3sec23">Step 10: Entering Additional Guesses</h5>&#13;
<p>Continue to play the game by entering values until you guess the correct number. When you guess correctly, the application displays <code>"Excellent! You guessed the number."</code>:</p>&#13;
<div class="image"><img src="Images/01unfig18.jpg" alt="Images" width="404" height="286"/></div>&#13;
<h5 class="h5" id="ch01lev3sec24">Playing the Game Again or Exiting the Application</h5>&#13;
<p>After you guess the correct number, the application asks if you’d like to play another game. At the <code>"Would you like to play again (y or n)?"</code> prompt, entering <code><strong>y</strong></code> causes the application to choose a new number and start a new game. Entering <code><strong>n</strong></code> terminates the application. Each time you execute this application from the beginning (<em>Step 7</em>), it will choose the same numbers for you to guess.</p>&#13;
<h5 class="h5" id="ch01lev3sec25">Reusing This Project for Subsequent Examples</h5>&#13;
<p>You can follow the steps in this section to create a separate project for every application in the book. However, for our examples, you may find it more convenient to remove the current program from the project then add a new one. To remove a file from your project (but not your system), right-click the file in the <span class="std">Project</span> navigator and select <span class="std">Delete</span>. In the dialog that appears, select <span class="std">Move to Trash</span>. You can then repeat <em>Step 6</em> to add a different program to the project.</p>&#13;
<h4 class="h4" id="ch01lev2sec3">1.2.3 Compiling and Running a C++20 Application with GNU C++ on Linux</h4>&#13;
<p>For this test drive, we assume that you read the Before You Begin section and that you placed the downloaded examples in your user account’s <code>Documents</code> folder.</p>&#13;
<h5 class="h5" id="ch01lev3sec26">Step 1: Changing to the <code>ch01</code> Folder</h5>&#13;
<p>From a Linux shell, use the <code>cd</code> command to change to the <code>ch01</code> subfolder of the book’s <code>examples</code> folder:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0015-01" id="f0015-01a">Click here to view code image</a></p>&#13;
<pre class="pre1">~$ <strong>cd ~/Documents/examples/ch01</strong>&#13;
~/Documents/examples/ch01$</pre>&#13;
<p>In this section’s figures, we use <code><strong>bold</strong></code> to highlight the text that you type. The prompt in our Ubuntu Linux shell uses a tilde (<code>~</code>) to represent the home directory. Each prompt ends with the dollar sign (<code>$</code>). The prompt may differ on your Linux system.</p>&#13;
<h5 class="h5" id="ch01lev3sec27">Step 2: Compiling the Application</h5>&#13;
<p>Before running the application, you must first compile it:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0015-02" id="f0015-02a">Click here to view code image</a></p>&#13;
<pre class="pre1">~/Documents/examples/ch01$ <strong>g++ -std=c++2a GuessNumber.cpp -o GuessNumber</strong>&#13;
~/Documents/examples/ch01$</pre>&#13;
<p>The <code>g++</code> command compiles the application:</p>&#13;
<p class="bull">• The <code>-std=c++2a</code> option indicates that we’re using C++20—<code>c++2a</code> will become <code>c++20</code> in a future GNU C++ release.</p>&#13;
<p class="bull">• The <code>-o</code> option names the executable file (<code>GuessNumber</code>) that you’ll use to run the program.</p>&#13;
<h5 class="h5" id="ch01lev3sec28">Step 3: Running the Application</h5>&#13;
<p>Type <code>./GuessNumber</code> at the prompt and press <em>Enter</em> to run the program:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0015-03" id="f0015-03a">Click here to view code image</a></p>&#13;
<pre class="pre1">~/Documents/examples/ch01$ <strong>./GuessNumber</strong>&#13;
I have a number between 1 and 1000.&#13;
Can you guess my number?&#13;
Please type your first guess.&#13;
?</pre>&#13;
<p>The <code>./</code> tells Linux to run a file from the current directory and is required to indicate that <code>GuessNumber</code> is an executable file.</p>&#13;
<h5 class="h5" id="ch01lev3sec29">Step 4: Entering Your First Guess</h5>&#13;
<p>The application displays <code>"Please type your first guess."</code>, then displays a question mark (<code>?</code>) as a prompt on the next line. At the prompt, enter <code><strong>500</strong></code>—note that the outputs may vary based on the compiler you’re using:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0016-01" id="f0016-01a">Click here to view code image</a></p>&#13;
<pre class="pre1">~/Documents/examples/ch01$ <strong>./GuessNumber</strong>&#13;
I have a number between 1 and 1000.&#13;
Can you guess my number?&#13;
Please type your first guess.&#13;
? <strong>500</strong>&#13;
Too high. Try again.&#13;
?</pre>&#13;
<p>The application displays <code>"Too high. Try again."</code>, meaning that the value you entered is greater than the number the application chose as the correct guess.</p>&#13;
<h5 class="h5" id="ch01lev3sec30">Step 5: Entering Another Guess</h5>&#13;
<p>At the next prompt, enter <code><strong>250</strong></code>:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0016-02" id="f0016-02a">Click here to view code image</a></p>&#13;
<pre class="pre1">~/Documents/examples/ch01$ <strong>./GuessNumber</strong>&#13;
I have a number between 1 and 1000.&#13;
Can you guess my number?&#13;
Please type your first guess.&#13;
? <strong>500</strong>&#13;
Too high. Try again.&#13;
? <strong>250</strong>&#13;
Too low. Try again.&#13;
?</pre>&#13;
<p>This time the application displays <code>"Too low. Try again."</code>, because the value you entered is less than the correct guess.</p>&#13;
<h5 class="h5" id="ch01lev3sec31">Step 6: Entering Additional Guesses</h5>&#13;
<p>Continue to play the game by entering values until you guess the correct number. When you guess correctly, the application displays <code>"Excellent! You guessed the number."</code>:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0017-01" id="f0017-01a">Click here to view code image</a></p>&#13;
<pre class="pre1">Too low. Try again.&#13;
? <strong>375</strong>&#13;
Too low. Try again.&#13;
? <strong>437</strong>&#13;
Too high. Try again.&#13;
? <strong>406</strong>&#13;
Too high. Try again.&#13;
? <strong>391</strong>&#13;
Too high. Try again.&#13;
? <strong>383</strong>&#13;
Too low. Try again.&#13;
? <strong>387</strong>&#13;
Too high. Try again.&#13;
? <strong>385</strong>&#13;
Too high. Try again.&#13;
? <strong>384</strong>&#13;
Excellent! You guessed the number.&#13;
Would you like to play again (y or n)?</pre>&#13;
<h5 class="h5" id="ch01lev3sec32">Step 7: Playing the Game Again or Exiting the Application</h5>&#13;
<p>After you guess the correct number, the application asks if you’d like to play another game. At the <code>"Would you like to play again (y or n)?"</code> prompt, entering <code><strong>y</strong></code> causes the application to choose a new number and start a new game. Entering <code><strong>n</strong></code> terminates the application and returns you to the shell. Each time you execute this application from the beginning (<em>Step 3</em>), it will choose the same numbers for you to guess.</p>&#13;
<h4 class="h4" id="ch01lev2sec4">1.2.4 Compiling and Running a C++20 Application with GNU C++ in the GCC Docker Container in Docker Running Natively Over Windows 10, macOS and/or Linux</h4>&#13;
<p>At the time of this writing, GNU C++ implements the most C++20 features. For this reason, you may want to use the latest GNU C++ compiler on your system. One of the most convenient cross-platform ways to do this is by using the GNU Compiler Collection (GCC) Docker container. This section assumes you’ve already installed Docker Desktop (Windows or macOS) or Docker Engine (Linux).</p>&#13;
<h5 class="h5" id="ch01lev3sec33">Executing the GNU Compiler Collection (GCC) Docker Container</h5>&#13;
<p>Open a Command Prompt (Windows), Terminal (macOS/Linux) or shell (Linux), then perform the following steps to launch the GCC Docker Container:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> Use the <code>cd</code> command to navigate to the <code>examples</code> folder containing this book’s examples.</p>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> Windows users: Launch the GCC docker container with the command</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0014-01" id="f0014-01a">Click here to view code image</a></p>&#13;
<pre class="pre">docker run --rm -it -v "%CD%":/usr/src gcc:latest</pre>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> macOS/Linux users: Launch the GCC docker container with the command</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0014-02" id="f0014-02a">Click here to view code image</a></p>&#13;
<pre class="pre">docker run --rm -it -v "$(pwd)":/usr/src gcc:latest</pre>&#13;
<p>In the preceding commands:</p>&#13;
<p class="bull">• <code>--rm</code> cleans up the container’s resources when you eventually shut it down.</p>&#13;
<p class="bull">• <code>-it</code> runs the container in interactive mode, so you can enter commands to change folders and to compile and run programs using the GNU C++ compiler.</p>&#13;
<p class="bull">• <code>-v "%CD%":/usr/src</code> (Windows) or <code>-v "$(pwd)":/usr/src</code> (macOS/Linux) allows the Docker container to access your local system files in the folder from which you executed the <code>docker run</code> command. In the Docker container, you’ll navigate with the <code>cd</code> command to subfolders of <code>/usr/src</code> to compile and run the C++ code.</p>&#13;
<p class="bull">• <code>gcc:latest</code> is the container name. The <code>:latest</code> specifies that you want to use the most up-to-date version of the <code>gcc</code> container. Each time you execute the preceding <code>docker run</code> commands, Docker checks whether you have the latest <code>gcc</code> container version. If not, Docker downloads it before executing the container.</p>&#13;
<p>Once the container is running, you’ll see a prompt like:</p>&#13;
<pre class="pre">root@67773f59d9ea:/#</pre>&#13;
<p>The container uses a Linux operating system. It’s prompt displays the current folder location between the <code>:</code> and <code>#</code>.</p>&#13;
<h5 class="h5" id="ch01lev3sec34">Changing to the <code>ch01</code> Folder in the Docker Container</h5>&#13;
<p>The <code>docker run</code> command specified above attaches your <code>examples</code> folder to the containers <code>/usr/src</code> folder. In the docker container, use the <code>cd</code> command to change to the <code>ch01</code> sub-folder of <code>/usr/src</code>:</p>&#13;
<p class="codelink"><a href="Images/ch01_images.xhtml#f0018-01" id="f0018-01a">Click here to view code image</a></p>&#13;
<pre class="pre1">root@01b4d47cadc6:/# <strong>cd /usr/src/ch01</strong>&#13;
root@01b4d47cadc6:/usr/src/ch01#</pre>&#13;
<p>To compile, run and interact with the <code>GuessNumber</code> application in the Docker container, follow <em>Steps 2–7</em> of <a href="ch01.xhtml#ch01lev2sec3">Section 1.2.3</a>’s GNU C++ Test-Drive.</p>&#13;
<h5 class="h5" id="ch01lev3sec35">Terminating the Docker Container</h5>&#13;
<p>You can terminate the Docker container by typing <em>Ctrl + d</em> at the container’s prompt.</p>&#13;
</div></body>
</html>