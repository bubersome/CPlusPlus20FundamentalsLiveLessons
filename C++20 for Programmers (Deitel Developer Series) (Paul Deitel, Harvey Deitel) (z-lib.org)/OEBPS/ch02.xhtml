<!DOCTYPE html>
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3.org/2002/06/xhtml2/ http://www.w3.org/MarkUp/SCHEMA/xhtml2.xsd" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
<link href="Styles/Style00.css" rel="stylesheet" type="text/css" />
<link href="Styles/Style01.css" rel="stylesheet" type="text/css" />

<style type="text/css">body{margin:1em;background-color:transparent!important;}#sbo-rt-content *{text-indent:0pt!important;}#sbo-rt-content .bq{margin-right:1em!important;}</style></head>
<body><div id="sbo-rt-content"><h2 class="h2" id="ch02">Chapter 2. Introduction to C++ Programming</h2>&#13;
<div class="image"><img src="Images/ch02.jpg" alt="Images" width="657" height="862"/></div>&#13;
<div class="objective">&#13;
<p class="objt">Objectives</p>&#13;
<p class="objp">In this chapter, you’ll:</p>&#13;
<p class="squ"><span class="red">■</span> Write simple C++ applications.</p>&#13;
<p class="squ"><span class="red">■</span> Use input and output statements.</p>&#13;
<p class="squ"><span class="red">■</span> Use fundamental data types.</p>&#13;
<p class="squ"><span class="red">■</span> Use arithmetic operators.</p>&#13;
<p class="squ"><span class="red">■</span> Understand the precedence of arithmetic operators.</p>&#13;
<p class="squ"><span class="red">■</span> Write decision-making statements.</p>&#13;
<p class="squ"><span class="red">■</span> Use relational and equality operators.</p>&#13;
<p class="squ"><span class="red">■</span> Begin appreciating the “objects natural” learning approach by creating and using objects of the C++ standard library’s <code>string</code> class before creating your own custom classes.</p>&#13;
</div>&#13;
<div class="box">&#13;
<p class="toct">Outline</p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec1"><span class="violet"><strong>2.1</strong></span> Introduction</a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec2"><span class="violet"><strong>2.2</strong></span> First Program in C++: Displaying a Line of Text</a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec3"><span class="violet"><strong>2.3</strong></span> Modifying Our First C++ Program</a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec4"><span class="violet"><strong>2.4</strong></span> Another C++ Program: Adding Integers</a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec5"><span class="violet"><strong>2.5</strong></span> Arithmetic</a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec6"><span class="violet"><strong>2.6</strong></span> Decision Making: Equality and Relational Operators</a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec7"><span class="violet"><strong>2.7</strong></span> Objects Natural: Creating and Using Objects of Standard Library Class <code>string</code></a></p>&#13;
<p class="chap-lev1"><a href="ch02.xhtml#ch02lev1sec8"><span class="violet"><strong>2.8</strong></span> Wrap-Up</a></p>&#13;
</div>&#13;
<h3 class="h3" id="ch02lev1sec1"><span class="violet">2.1</span> Introduction</h3>&#13;
<p>This chapter presents several code examples that demonstrate how your programs can display messages and obtain data from the user for processing. The first three display messages on the screen. The next obtains two numbers from a user at the keyboard, calculates their sum and displays the result—the accompanying discussion introduces C++’s arithmetic operators. The fifth example demonstrates decision making by showing you how to compare two numbers, then display messages based on the comparison results.</p>&#13;
<h5 class="h5" id="ch02lev3sec1">“Objects Natural” Learning Approach</h5>&#13;
<p>In your programs, you’ll create and use many objects of carefully-developed-and-tested preexisting classes that enable you to perform significant tasks with minimal code. These classes typically come from:</p>&#13;
<p class="bull">• the C++ standard library,</p>&#13;
<p class="bull">• platform-specific libraries (such as those provided by Microsoft for creating Windows applications or by Apple for creating macOS applications) and</p>&#13;
<p class="bull">• free third-party libraries often created by the massive open-source communities that have developed around all major contemporary programming languages.</p>&#13;
<p>To help you appreciate this style of programming early in the book, you’ll create and use objects of preexisting C++ standard library classes before creating your own custom classes. We call this the “objects natural” approach. You’ll begin by creating and using <code>string</code> objects in this chapter’s final example. In later chapters, you’ll create your own custom classes. You’ll see that C++ enables you to “craft valuable classes” for your own use and that other programmers can reuse.</p>&#13;
<h5 class="h5" id="ch02lev3sec2">Compiling and Running Programs</h5>&#13;
<p>For instructions on compiling and running programs in Microsoft Visual Studio, Apple Xcode and GNU C++, see the test-drives in <a href="ch01.xhtml#ch01">Chapter 1</a> or our video instructions at</p>&#13;
<pre class="pre"><a href="http://deitel.com/c-plus-plus-20-for-programmers">http://deitel.com/c-plus-plus-20-for-programmers</a></pre>&#13;
<h5 class="h5" id="ch02lev3sec3">“Rough-Cut” E-Book for O’Reilly Online Learning Subscribers</h5>&#13;
<p>You are viewing an early-access “rough cut” of <em>C++20 for Programmers</em>. <strong>We prepared this content carefully, but it has not yet been reviewed or copy edited and is subject to change.</strong> As we complete each chapter, we’ll post it here. Please send any corrections, comments, questions and suggestions for improvement to <code><a href="mailto:paul@deitel.com">paul@deitel.com</a></code> and I’ll respond promptly. Check here frequently for updates.</p>&#13;
<h5 class="h5" id="ch02lev3sec4">“Sneak Peek” Videos for O’Reilly Online Learning Subscribers</h5>&#13;
<p>As an O’Reilly Online Learning subscriber, you also have access to the “sneak peek” of our new <em>C++20 Fundamentals LiveLessons</em> videos at:</p>&#13;
<pre class="pre"><a href="https://learning.oreilly.com/videos/c-20-fundamentals-parts/9780136875185">https://learning.oreilly.com/videos/c-20-fundamentals-parts/9780136875185</a></pre>&#13;
<p>Co-author Paul Deitel immediately records each video lesson as we complete each rough-cut e-book chapter. Lessons go live on O’Reilly Online Learning a few days later. Again, check here frequently for updates.</p>&#13;
<h3 class="h3" id="ch02lev1sec2"><span class="violet">2.2</span> First Program in C++: Displaying a Line of Text</h3>&#13;
<p>Consider a simple program that displays a line of text (<a href="ch02.xhtml#fig2_1">Fig. 2.1</a>). The line numbers are not part of the program.</p>&#13;
<div class="group" id="fig2_1">&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#aa02fig01" id="a02fig01">Click here to view code image</a></p>&#13;
<pre class="pre2"><strong><span class="cviolet"> 1</span></strong>  <span class="lgreen">// fig02_01.cpp</span>&#13;
<strong><span class="cviolet"> 2</span></strong>  <span class="lgreen">// Text-printing program.</span>&#13;
<strong><span class="cviolet"> 3</span></strong>  <span class="blue">#include</span> &lt;iostream&gt; <span class="lgreen">// enables program to output data to the screen</span>&#13;
<strong><span class="cviolet"> 4</span></strong>&#13;
<strong><span class="cviolet"> 5</span></strong>  <span class="lgreen">// function main begins program execution</span>&#13;
<strong><span class="cviolet"> 6</span></strong>  <span class="blue">int</span> main() {&#13;
<strong><span class="cviolet"> 7</span></strong>     std::cout &lt;&lt; <span class="green">"Welcome to C++!\n"</span>; <span class="lgreen">// display message</span>&#13;
<strong><span class="cviolet"> 8</span></strong>&#13;
<strong><span class="cviolet"> 9</span></strong>     <span class="blue">return</span> <span class="green">0</span>; <span class="lgreen">// indicate that program ended successfully</span>&#13;
<strong><span class="cviolet">10</span></strong>   } <span class="lgreen">// end function main</span></pre>&#13;
<pre class="pre1"><code>Welcome to C++!</code></pre>&#13;
<p class="fig-caption"><span class="red"><strong>Fig. 2.1</strong></span> Text-printing program.</p>&#13;
</div>&#13;
<h5 class="h5" id="ch02lev3sec5">Comments</h5>&#13;
<p>Lines 1 and 2</p>&#13;
<pre class="pre"><span class="lgreen">// fig02_01.cpp</span>&#13;
<span class="lgreen">// Text-printing program.</span></pre>&#13;
<p>each begin with <code><strong><span class="violet">//</span></strong></code>, indicating that the remainder of each line is a <span class="violet"><strong>comment</strong></span>. In each of our programs, the first line comment contains the program’s file name. The comment <code>"Text-printing program."</code> describes the purpose of the program. A comment beginning with <code>//</code> is called a <span class="violet"><strong>single-line comment</strong></span> because it terminates at the end of the current line. You can create <span class="violet"><strong>multiline comments</strong></span> by enclosing them in <code>/*</code> and <code>*/</code>, as in</p>&#13;
<pre class="pre"><span class="lgreen">/* fig02_01.cpp</span>&#13;
   <span class="lgreen">Text-printing program. */</span></pre>&#13;
<h5 class="h5" id="ch02lev3sec6"><code>#include</code> Preprocessing Directive</h5>&#13;
<p>Line 3</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0021-01" id="f0021-01a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">#include</span> &lt;iostream&gt; <span class="lgreen">// enables program to output data to the screen</span></pre>&#13;
<p>is a <span class="violet"><strong>preprocessing directive</strong></span>—that is, a message to the C++ preprocessor, which the compiler invokes before compiling the program. This line notifies the preprocessor to include in the program the contents of the <span class="violet"><strong>input/output stream header</strong></span> <code><strong><span class="violet">&lt;iostream&gt;</span></strong></code>. This header is a file containing information the compiler requires when compiling any program that outputs data to the screen or inputs data from the keyboard using C++’s stream input/output. The program in <a href="ch02.xhtml#fig2_1">Fig. 2.1</a> outputs data to the screen. <a href="ch05.xhtml#ch05">Chapter 5</a> discusses headers in more detail, and <a href="ch15.xhtml#ch15">Chapter 15</a> explains the contents of <code>&lt;iostream&gt;</code> in more detail.</p>&#13;
<h5 class="h5" id="ch02lev3sec7">Blank Lines and White Space</h5>&#13;
<p>Line 4 is simply a blank line. You use blank lines, spaces and tabs to make programs easier to read. Together, these characters are known as <span class="violet"><strong>white space</strong></span>—they’re normally ignored by the compiler.</p>&#13;
<h5 class="h5" id="ch02lev3sec8">The <code>main</code> Function</h5>&#13;
<p>Line 6</p>&#13;
<pre class="pre"><span class="blue">int</span> main() {</pre>&#13;
<p>is a part of every C++ program. The parentheses after <code><strong><span class="violet">main</span></strong></code> indicate that it’s a <span class="violet"><strong>function</strong></span>. C++ programs typically consist of one or more functions and classes. Exactly one function in every program must be named <code>main</code>. <a href="ch02.xhtml#fig2_1">Figure 2.1</a> contains only one function. C++ programs begin executing at function <code>main</code>. The keyword <code>int</code> to the left of <code>main</code> indicates that after <code>main</code> finishes executing, it “returns” an integer (whole number) value. <span class="violet"><strong>Keywords</strong></span> are reserved by C++ for a specific use. We show the complete list of C++ keywords in <a href="ch03.xhtml#ch03">Chapter 3</a>. We’ll explain what it means for a function to “return a value” when we demonstrate how to create your own functions in <a href="ch05.xhtml#ch05">Chapter 5</a>. For now, simply include the keyword <code>int</code> to the left of <code>main</code> in each of your programs.</p>&#13;
<p>The <span class="violet"><strong>left brace</strong></span>, <code><strong><span class="violet">{</span></strong></code>, (end of line 6) must <em>begin</em> each function’s <span class="violet"><strong>body</strong></span>, which contains the instructions the function performs. A corresponding <span class="violet"><strong>right brace</strong></span>, <code><strong><span class="violet">}</span></strong></code>, (line 10) must <em>end</em> each function’s body.</p>&#13;
<h5 class="h5" id="ch02lev3sec9">An Output Statement</h5>&#13;
<p>Line 7</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0022-01" id="f0022-01a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cout &lt;&lt; <span class="green">"Welcome to C++!\n"</span>; <span class="lgreen">// display message</span></pre>&#13;
<p>displays the characters contained between the double quotation marks. Together, the quotation marks and the characters between them are called a <span class="violet"><strong>string</strong></span>, a <span class="violet"><strong>character string</strong></span> or a <span class="violet"><strong>string literal</strong></span>. We refer to characters between double quotation marks simply as strings. White-space characters in strings are not ignored by the compiler.</p>&#13;
<p>The entire line 7—including <code>std::cout</code>, the <span class="violet"><strong>&lt;&lt; operator</strong></span>, the string <code>"Welcome to C++!\n"</code> and the <span class="violet"><strong>semicolon</strong></span> (<code><strong><span class="violet">;</span></strong></code>)—is called a <span class="violet"><strong>statement</strong></span>. Most C++ statements end with a semicolon. Omitting the semicolon at the end of a C++ statement when one is needed is a syntax error. Preprocessing directives (such as <code>#include</code>) are not C++ statements and do not end with a semicolon.</p>&#13;
<p>Typically, output and input in C++ are accomplished with <span class="violet"><strong>streams</strong></span> of data. When the preceding statement executes, it sends the stream of characters <code>Welcome to C++!\n</code> to the <span class="violet"><strong>standard output stream object</strong></span> (<code><strong><span class="violet">std::cout</span></strong></code>), which is normally “connected” to the screen.</p>&#13;
<h5 class="h5" id="ch02lev3sec10">Indentation</h5>&#13;
<p>Indent the body of each function one level within the braces that delimit the function’s body. This makes a program’s functional structure stand out, making the program easier to read. Set a convention for the size of indent you prefer, then apply it uniformly. The tab key may be used to create indents, but tab stops may vary. We prefer three spaces per level of indent.</p>&#13;
<h5 class="h5" id="ch02lev3sec11">The <code>std</code> Namespace</h5>&#13;
<p>The <code>std::</code> before <code>cout</code> is required when we use names that we’ve brought into the program by preprocessing directives like <code>#include &lt;iostream&gt;</code>. The notation <code>std::cout</code> specifies that we are using a name, in this case <code>cout</code>, that belongs to namespace <code>std</code>. The names <code>cin</code> (the standard input stream) and <code>cerr</code> (the standard error stream)—introduced in <a href="ch01.xhtml#ch01">Chapter 1</a>—also belong to namespace <code>std</code>. We discuss namespaces in Chapter 23, Other Topics. For now, you should simply remember to include <code>std::</code> before each mention of <code>cout</code>, <code>cin</code> and <code>cerr</code> in a program. This can be cumbersome—we’ll soon introduce <code>using</code> declarations and the <code>using</code> directive, which will enable you to omit <code>std::</code> before each use of a name in the <code>std</code> namespace.</p>&#13;
<h5 class="h5" id="ch02lev3sec12">The Stream Insertion Operator and Escape Sequences</h5>&#13;
<p>In a <code>cout</code> statement, the <code>&lt;&lt;</code> operator is referred to as the <span class="violet"><strong>stream insertion operator</strong></span>. When this program executes, the value to the operator’s right (the right <span class="violet"><strong>operand</strong></span>) is inserted in the output stream. Notice that the <code>&lt;&lt;</code> operator points toward where the data goes. A string’s characters normally display exactly as typed between the double quotes. However, the characters <code>\n</code> are <em>not</em> displayed in <a href="ch02.xhtml#fig2_1">Fig. 2.1</a>’s sample output. The backslash (<code>\</code>) is called an <span class="violet"><strong>escape character</strong></span>. It indicates that a “special” character is to be output. When a backslash is encountered in a string, the next character is combined with the backslash to form an <span class="violet"><strong>escape sequence</strong></span>. The escape sequence <code>\n</code> means <span class="violet"><strong>newline</strong></span>. It causes the <span class="violet"><strong>cursor</strong></span> (i.e., the current screen-position indicator) to move to the beginning of the next line on the screen. Some common escape sequences are shown in the following table:</p>&#13;
<div class="image"><img src="Images/p0111-01.jpg" alt="Images" width="804" height="328"/></div>&#13;
<h5 class="h5" id="ch02lev3sec13">The <code>return</code> Statement</h5>&#13;
<p>Line 9</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0023-01" id="f0023-01a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">return</span> <span class="green">0</span>; <span class="lgreen">// indicate that program ended successfully</span></pre>&#13;
<p>is one of several means we’ll use to <span class="violet"><strong>exit a function</strong></span>. In this <code><strong><span class="violet">return</span></strong></code> <span class="violet"><strong>statement</strong></span> at the end of <code>main</code>, the value <code>0</code> indicates that the program terminated successfully. If program execution reaches the end of <code>main</code> without encountering a <code>return</code> statement, C++ assumes that the program terminated successfully. So, we omit the <code>return</code> statement at the end of <code>main</code> in subsequent programs that terminate successfully.</p>&#13;
<h3 class="h3" id="ch02lev1sec3"><span class="violet">2.3</span> Modifying Our First C++ Program</h3>&#13;
<p>The next two examples modify the program of <a href="ch02.xhtml#fig2_1">Fig. 2.1</a>. The first displays text on one line using multiple statements. The second displays text on several lines using one statement.</p>&#13;
<h5 class="h5" id="ch02lev3sec14">Displaying a Single Line of Text with Multiple Statements</h5>&#13;
<p><a href="ch02.xhtml#fig2_2">Figure 2.2</a> performs stream insertion in multiple statements (lines 7–8), yet produces the same output as <a href="ch02.xhtml#fig2_1">Fig. 2.1</a>. Each stream insertion resumes displaying where the previous one stopped. Line 7 displays <code>Welcome</code> followed by a space, and because this string did not end with <code>\n</code>, line 8 begins displaying on the same line immediately following the space.</p>&#13;
<div class="group" id="fig2_2">&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#aa02fig02" id="a02fig02">Click here to view code image</a></p>&#13;
<pre class="pre2"><strong><span class="cviolet"> 1</span></strong>  <span class="lgreen">// fig02_02.cpp</span>&#13;
<strong><span class="cviolet"> 2</span></strong>  <span class="lgreen">// Displaying a line of text with multiple statements.</span>&#13;
<strong><span class="cviolet"> 3</span></strong>  <span class="blue">#include</span> &lt;iostream&gt; <span class="lgreen">// enables program to output data to the screen</span>&#13;
<strong><span class="cviolet"> 4</span></strong>&#13;
<strong><span class="cviolet"> 5</span></strong>  <span class="lgreen">// function main begins program execution</span>&#13;
<strong><span class="cviolet"> 6</span></strong>  <span class="blue">int</span> main() {&#13;
<strong><span class="cviolet"> 7</span></strong>     <span class="yell">std::cout &lt;&lt; <span class="green">"Welcome "</span>; </span>&#13;
<strong><span class="cviolet"> 8</span></strong>     <span class="yell">std::cout &lt;&lt; <span class="green">"to C++!\n"</span>;</span>&#13;
<strong><span class="cviolet"> 9</span></strong>  } <span class="lgreen">// end function main</span></pre>&#13;
<pre class="pre1"><code>Welcome to C++!</code></pre>&#13;
<p class="fig-caption"><span class="red"><strong>Fig. 2.2</strong></span> Displaying a line of text with multiple statements.</p>&#13;
</div>&#13;
<h5 class="h5" id="ch02lev3sec15">Displaying Multiple Lines of Text with a Single Statement</h5>&#13;
<p>A single statement can display multiple lines by using additional newline characters, as in line 7 of <a href="ch02.xhtml#fig2_3">Fig. 2.3</a>. Each time the <code>\n</code> (newline) escape sequence is encountered in the output stream, the screen cursor is positioned to the beginning of the next line. To get a blank line in your output, place two newline characters back to back, as in line 7.</p>&#13;
<div class="group" id="fig2_3">&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#aa02fig03" id="a02fig03">Click here to view code image</a></p>&#13;
<pre class="pre2"><strong><span class="cviolet"> 1</span></strong>  <span class="lgreen">// fig02_03.cpp</span>&#13;
<strong><span class="cviolet"> 2</span></strong>  <span class="lgreen">// Displaying multiple lines of text with a single statement.</span>&#13;
<strong><span class="cviolet"> 3</span></strong>  <span class="blue">#include</span> &lt;iostream&gt; <span class="lgreen">// enables program to output data to the screen</span>&#13;
<strong><span class="cviolet"> 4</span></strong>&#13;
<strong><span class="cviolet"> 5</span></strong>  <span class="lgreen">// function main begins program execution</span>&#13;
<strong><span class="cviolet"> 6</span></strong>  <span class="blue">int</span> main() {&#13;
<strong><span class="cviolet"> 7</span></strong>     std::cout &lt;&lt; <span class="green">"Welcome<span class="yell">\n</span>to<span class="yell">\n\n</span>C++!<span class="yell">\n</span>"</span>;&#13;
<strong><span class="cviolet"> 8</span></strong>  } <span class="lgreen">// end function main</span></pre>&#13;
<pre class="pre1"><code>Welcome</code>&#13;
<code>to</code>&#13;
&#13;
<code>C++!</code></pre>&#13;
<p class="fig-caption"><span class="red"><strong>Fig. 2.3</strong></span> Displaying multiple lines of text with a single statement.</p>&#13;
</div>&#13;
<h3 class="h3" id="ch02lev1sec4"><span class="violet">2.4</span> Another C++ Program: Adding Integers</h3>&#13;
<p>Our next program obtains two integers typed by a user at the keyboard, computes their sum and outputs the result using <code>std::cout</code>. <a href="ch02.xhtml#fig2_4">Figure 2.4</a> shows the program and sample inputs and outputs. In the sample execution, the user’s input is in <strong>bold</strong>.</p>&#13;
<div class="group" id="fig2_4">&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#aa02fig04" id="a02fig04">Click here to view code image</a></p>&#13;
<pre class="pre2"><strong><span class="cviolet"> 1</span></strong>  <span class="lgreen">// fig02_04.cpp</span>&#13;
<strong><span class="cviolet"> 2</span></strong>  <span class="lgreen">// Addition program that displays the sum of two integers.</span>&#13;
<strong><span class="cviolet"> 3</span></strong>  <span class="blue">#include</span> &lt;iostream&gt; <span class="lgreen">// enables program to perform input and output</span>&#13;
<strong><span class="cviolet"> 4</span></strong>&#13;
<strong><span class="cviolet"> 5</span></strong>  <span class="lgreen">// function main begins program execution</span>&#13;
<strong><span class="cviolet"> 6</span></strong>  <span class="blue">int</span> main() {&#13;
<strong><span class="cviolet"> 7</span></strong>     <span class="lgreen">// declaring and initializing variables</span>&#13;
<strong><span class="cviolet"> 8</span></strong>     <span class="yell"><span class="blue">int</span> number1{<span class="green">0</span>}; <span class="lgreen">// first integer to add (initialized to 0)</span>  </span>&#13;
<strong><span class="cviolet"> 9</span></strong>     <span class="yell"><span class="blue">int</span> number2{<span class="green">0</span>}; <span class="lgreen">// second integer to add (initialized to 0)</span> </span>&#13;
<strong><span class="cviolet">10</span></strong>     <span class="yell"><span class="blue">int</span> sum{<span class="green">0</span>}; <span class="lgreen">// sum of number1 and number2 (initialized to 0)</span></span>&#13;
<strong><span class="cviolet">11</span></strong>&#13;
<strong><span class="cviolet">12</span></strong>     std::cout &lt;&lt; <span class="green">"Enter first integer: "</span>; <span class="lgreen">// prompt user for data</span>&#13;
<strong><span class="cviolet">13</span></strong>     <span class="yell">std::cin &gt;&gt; number1; <span class="lgreen">// read first integer from user into number1</span></span>&#13;
<strong><span class="cviolet">14</span></strong>&#13;
<strong><span class="cviolet">15</span></strong>     std::cout &lt;&lt; <span class="green">"Enter second integer: "</span>; <span class="lgreen">// prompt user for data</span>&#13;
<strong><span class="cviolet">16</span></strong>     std::cin &gt;&gt; number2; <span class="lgreen">// read second integer from user into number2</span>&#13;
<strong><span class="cviolet">17</span></strong>&#13;
<strong><span class="cviolet">18</span></strong>     <span class="yell">sum = number1 + number2; <span class="lgreen">// add the numbers; store result in sum</span></span>&#13;
<strong><span class="cviolet">19</span></strong>&#13;
<strong><span class="cviolet">20</span></strong>     std::cout &lt;&lt; <span class="green">"Sum is "</span> &lt;&lt; sum &lt;&lt; std::endl; <span class="lgreen">// display sum; end line</span>&#13;
<strong><span class="cviolet">21</span></strong>   } <span class="lgreen">// end function main</span></pre>&#13;
<pre class="pre1"><code>Enter first integer: <strong>45</strong></code>&#13;
<code>Enter second integer: <strong>72</strong></code>&#13;
<code>Sum is 117</code></pre>&#13;
<p class="fig-caption"><span class="red"><strong>Fig. 2.4</strong></span> Addition program that displays the sum of two integers.</p>&#13;
</div>&#13;
<h5 class="h5" id="ch02lev3sec16">Variable Declarations and List Initialization</h5>&#13;
<p>Lines 8–10</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0025-01" id="f0025-01a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> number1{<span class="green">0</span>}; <span class="lgreen">// first integer to add (initialized to 0)</span>&#13;
<span class="blue">int</span> number2{<span class="green">0</span>}; <span class="lgreen">// second integer to add (initialized to 0)</span>&#13;
<span class="blue">int</span> sum{<span class="green">0</span>}; <span class="lgreen">// sum of number1 and number2 (initialized to 0)</span></pre>&#13;
<p>are <span class="violet"><strong>declarations</strong></span>—<code>number1</code>, <code>number2</code> and <code>sum</code> are the names of <span class="violet"><strong>variables</strong></span>. These declarations specify that the variables <code>number1</code>, <code>number2</code> and <code>sum</code> are data of type <code><strong><span class="violet">int</span></strong></code>, meaning that these variables will hold <span class="violet"><strong>integer</strong></span> (whole number) values, such as 7, –11, 0 and 31914. All variables must be declared with a name and a data type.</p>&#13;
<p><span class="size">11</span> Lines 8–10 initialize each variable to <code>0</code> by placing a value in braces (<code>{</code> and <code>}</code>) immediately following the variable’s name—this is known as <span class="violet"><strong>list initialization</strong></span>, which was introduced in C++11. Although it’s not always necessary to initialize every variable explicitly, doing so will help you avoid many kinds of problems.</p>&#13;
<p>Prior to C++11, lines 8–10 would have been written as:</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0026-01" id="f0026-01a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> number1 = <span class="green">0</span>; <span class="lgreen">// first integer to add (initialized to 0)</span>&#13;
<span class="blue">int</span> number2 = <span class="green">0</span>; <span class="lgreen">// second integer to add (initialized to 0)</span>&#13;
<span class="blue">int</span> sum = <span class="green">0</span>; <span class="lgreen">// sum of number1 and number2 (initialized to 0)</span></pre>&#13;
<p>If you work with legacy C++ programs, you’re likely to encounter initialization statements using this older C++ coding style. In subsequent chapters, we’ll discuss various list initialization benefits.</p>&#13;
<h5 class="h5" id="ch02lev3sec17">Declaring Multiple Variables at Once</h5>&#13;
<p>Several variables of the same type may be declared in one declaration—for example, we could have declared and initialized all three variables in one declaration by using a comma-separated list as follows:</p>&#13;
<pre class="pre"><span class="blue">int</span> number1{<span class="green">0</span>}, number2{<span class="green">0</span>}, sum{<span class="green">0</span>};</pre>&#13;
<p>But, this makes the program less readable and makes it awkward to provide comments that describe each variable’s purpose.</p>&#13;
<h5 class="h5" id="ch02lev3sec18">Fundamental Types</h5>&#13;
<p>We’ll soon discuss the type <code>double</code> for specifying real numbers and the type <code>char</code> for specifying character data. Real numbers are numbers with decimal points, such as 3.4, 0.0 and –11.19. A <code>char</code> variable may hold only a single lowercase letter, uppercase letter, digit or special character (e.g., <code>$</code> or <code>*</code>). Types such as <code>int</code>, <code>double</code> and <code>char</code> are called <span class="violet"><strong>fundamental types</strong></span>. Fundamental-type names consist of one or more keywords and must appear in all lowercase letters. For a complete list of C++ fundamental types and their typical ranges, see</p>&#13;
<pre class="pre"><a href="https://en.cppreference.com/w/cpp/language/types">https://en.cppreference.com/w/cpp/language/types</a></pre>&#13;
<h5 class="h5" id="ch02lev3sec19">Identifiers</h5>&#13;
<p>A variable name (such as <code>number1</code>) is any valid <span class="violet"><strong>identifier</strong></span> that is not a keyword. An identifier is a series of characters consisting of letters, digits and underscores (<code>_</code>) that does not begin with a digit. C++ is <span class="violet"><strong>case sensitive</strong></span>—uppercase and lowercase letters are different, so <code>a1</code> and <code>A1</code> are different identifiers.</p>&#13;
<p>C++ allows identifiers of any length, but some C++ implementations may restrict identifier lengths. Do not use identifiers that begin with underscores and double underscores, because C++ compilers use names like that for their own purposes internally.</p>&#13;
<h5 class="h5" id="ch02lev3sec20">Placement of Variable Declarations</h5>&#13;
<p>Variable declarations can be placed almost anywhere in a program, but they must appear before the variables are used. For example, the declaration in line 8</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0026-02" id="f0026-02a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> number1{<span class="green">0</span>}; <span class="lgreen">// first integer to add (initialized to 0)</span></pre>&#13;
<p>could have been placed immediately before line 13</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-01" id="f0027-01a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cin &gt;&gt; number1; <span class="lgreen">// read first integer from user into number1</span></pre>&#13;
<p>the declaration in line 9</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-02" id="f0027-02a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> number2{<span class="green">0</span>}; <span class="lgreen">// second integer to add (initialized to 0)</span></pre>&#13;
<p>could have been placed immediately before line 16</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-03" id="f0027-03a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cin &gt;&gt; number2; <span class="lgreen">// read second integer from user into number2</span></pre>&#13;
<p>and the declaration in line 10</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-04" id="f0027-04a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> sum{<span class="green">0</span>}; <span class="lgreen">// sum of number1 and number2 (initialized to 0)</span></pre>&#13;
<p>could have been placed immediately before line 18</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-05" id="f0027-05a">Click here to view code image</a></p>&#13;
<pre class="pre">sum = number1 + number2; <span class="lgreen">// add the numbers; store result in sum</span></pre>&#13;
<p>In fact, lines 10 and 18 could have been combined into the following declaration and placed just before line 20:</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-06" id="f0027-06a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> sum{number1 + number2}; <span class="lgreen">// initialize sum with number1 + number2</span></pre>&#13;
<h5 class="h5" id="ch02lev3sec21">Obtaining the First Value from the User</h5>&#13;
<p>Line 12</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-07" id="f0027-07a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cout &lt;&lt; <span class="green">"Enter first integer: "</span>; <span class="lgreen">// prompt user for data</span></pre>&#13;
<p>displays <code>Enter first integer:</code> followed by a space. This message is called a <span class="violet"><strong>prompt</strong></span> because it directs the user to take a specific action. Line 13</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-08" id="f0027-08a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cin &gt;&gt; number1; <span class="lgreen">// read first integer from user into number1</span></pre>&#13;
<p>uses the <span class="violet"><strong>standard input stream object</strong></span> <code><strong><span class="violet">cin</span></strong></code> (of namespace <code>std</code>) and the <span class="violet"><strong>stream extraction operator</strong></span>, <code><strong><span class="violet">&gt;&gt;</span></strong></code>, to obtain a value from the keyboard.</p>&#13;
<p>When the preceding statement executes, the computer waits for the user to enter a value for variable <code>number1</code>. The user responds by typing an integer (as characters), then pressing the <em>Enter</em> key (sometimes called the <em>Return</em> key) to send the characters to the computer. The computer converts the character representation of the number to an integer value and assigns this value to the variable <code>number1</code>. Pressing <em>Enter</em> also causes the cursor to move to the beginning of the next line on the screen.</p>&#13;
<p>When your program is expecting the user to enter an integer, the user could enter alphabetic characters, special symbols (like # or @) or a number with a decimal point (like 73.5), among others. In these early programs, we assume that the user enters valid data. We’ll present various techniques for dealing with data-entry problems later.</p>&#13;
<h5 class="h5" id="ch02lev3sec22">Obtaining the Second Value from the User</h5>&#13;
<p>Line 15</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-09" id="f0027-09a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cout &lt;&lt; <span class="green">"Enter second integer:</span> "; <span class="lgreen">// prompt user for data</span></pre>&#13;
<p>displays <code>Enter second integer:</code> on the screen, prompting the user to take action. Line 16</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0027-10" id="f0027-10a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cin &gt;&gt; number2; <span class="lgreen">// read second integer from user into number2</span></pre>&#13;
<p>obtains a value for variable <code>number2</code> from the user.</p>&#13;
<h5 class="h5" id="ch02lev3sec23">Calculating the Sum of the Values Input by the User</h5>&#13;
<p>The assignment statement in line 18</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0028-01" id="f0028-01a">Click here to view code image</a></p>&#13;
<pre class="pre">sum = number1 + number2; <span class="lgreen">// add the numbers; store result in sum</span></pre>&#13;
<p>adds the values of variables <code>number1</code> and <code>number2</code> and assigns the result to variable <code>sum</code> using the <span class="violet"><strong>assignment operator</strong></span> <code><strong><span class="violet">=</span></strong></code>. Most calculations are performed in assignment statements. The <code>=</code> operator and the <code>+</code> operator are <span class="violet"><strong>binary operators</strong></span> because each has two operands. For the <code>+</code> operator, the two operands are <code>number1</code> and <code>number2</code>. For the preceding <code>=</code> operator, the two operands are <code>sum</code> and the value of the expression <code>number1 + number2</code>. Placing spaces on either side of a binary operator makes the operator stand out and makes the program more readable.</p>&#13;
<h5 class="h5" id="ch02lev3sec24">Displaying the Result</h5>&#13;
<p>Line 20</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0028-02" id="f0028-02a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cout &lt;&lt; <span class="green">"Sum is "</span> &lt;&lt; sum &lt;&lt; std::endl; <span class="lgreen">// display sum; end line</span></pre>&#13;
<p>displays the character string <code>"Sum is"</code> followed by the numerical value of variable <code>sum</code> followed by <code>std::endl</code>—a <span class="violet"><strong>stream manipulator</strong></span>. The name <code>endl</code> is an abbreviation for “end line” and belongs to namespace <code>std</code>. The <code>std::endl</code> stream manipulator outputs a new-line, then “flushes the output buffer.” This simply means that, on some systems where outputs accumulate in the machine until there are enough to “make it worthwhile” to display them on the screen, <code>std::endl</code> forces any accumulated outputs to be displayed at that moment. This can be important when the outputs are prompting the user for an action, such as entering data.</p>&#13;
<p>The preceding statement outputs multiple values of different types. The stream insertion operator “knows” how to output each type of data. Using multiple stream insertion operators (<code>&lt;&lt;</code>) in a single statement is referred to as <span class="violet"><strong>concatenating</strong></span>, <span class="violet"><strong>chaining</strong></span> or <span class="violet"><strong>cascading stream insertion operations</strong></span>.</p>&#13;
<p>Calculations can also be performed in output statements. We could have combined the statements in lines 18 and 20 into the statement</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0028-03" id="f0028-03a">Click here to view code image</a></p>&#13;
<pre class="pre">std::cout &lt;&lt; <span class="green">"Sum is "</span> &lt;&lt; number1 + number2 &lt;&lt; std::endl;</pre>&#13;
<p>thus eliminating the need for the variable <code>sum</code>.</p>&#13;
<p>The signature feature of C++ is that you can create your own data types called classes (we discuss this in <a href="ch10.xhtml#ch10">Chapter 10</a> and explore it in depth in <a href="ch11.xhtml#ch11">Chapter 11</a>). You can then “teach” C++ how to input and output values of these new data types using the <code>&gt;&gt;</code> and <code>&lt;&lt;</code> operators, respectively. This is called <span class="violet"><strong>operator overloading</strong></span>, which we explore in <a href="ch14.xhtml#ch14">Chapter 14</a>.</p>&#13;
<h3 class="h3" id="ch02lev1sec5"><span class="violet">2.5</span> Arithmetic</h3>&#13;
<p>The following table summarizes the <span class="violet"><strong>arithmetic operators</strong></span>:</p>&#13;
<div class="image"><img src="Images/p0116-01.jpg" alt="Images" width="764" height="221"/></div>&#13;
<p>Note the use of various special symbols not used in algebra. The <span class="violet"><strong>asterisk</strong></span> (<code><strong><span class="violet">*</span></strong></code>) indicates multiplication and the <span class="violet"><strong>percent sign</strong></span> (<code><strong><span class="violet">%</span></strong></code>) is the remainder operator, which we’ll discuss shortly. These arithmetic operators are all binary operators.</p>&#13;
<h5 class="h5" id="ch02lev3sec25">Integer Division</h5>&#13;
<p><span class="violet"><strong>Integer division</strong></span> in which the numerator and the denominator are integers yields an integer quotient. For example, the expression <code>7/4</code> evaluates to <code>1</code>, and the expression <code>17 / 5</code> evaluates to <code>3</code>. Any fractional part in the result of integer division is truncated—no rounding occurs.</p>&#13;
<h5 class="h5" id="ch02lev3sec26">Remainder Operator</h5>&#13;
<p>The <span class="violet"><strong>remainder operator</strong></span>, <code><strong><span class="violet">%</span></strong></code>, yields the remainder after integer division and can be used only with integer operands—<code>x % y</code> yields the remainder after dividing <code>x</code> by <code>y</code>. Thus, <code>7%4</code> yields <code>3</code> and <code>17 % 5</code> yields <code>2</code>.</p>&#13;
<h5 class="h5" id="ch02lev3sec27">Parentheses for Grouping Subexpressions</h5>&#13;
<p>Parentheses are used in C++ expressions in the same manner as in algebraic expressions. For example, to multiply <code>a</code> times the quantity <code>b + c</code> we write <code>a * (b + c)</code>.</p>&#13;
<h5 class="h5" id="ch02lev3sec28">Rules of Operator Precedence</h5>&#13;
<p>C++ applies the operators in arithmetic expressions in a precise order determined by the following <span class="violet"><strong>rules of operator precedence</strong></span>, which are generally the same as those in algebra:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> Expressions in parentheses evaluate first. Parentheses are said to be at the “highest level of precedence.” In cases of <span class="violet"><strong>nested</strong></span> or <span class="violet"><strong>embedded parentheses</strong></span>, such as</p>&#13;
<pre class="pre">(a * (b + c))</pre>&#13;
<p class="nump">expressions in the innermost pair of parentheses evaluate first.</p>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> Multiplication, division and remainder operations evaluate next. If an expression contains several multiplication, division and remainder operations, they’re applied from left-to-right. These three operators are said to be on the same level of precedence.</p>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> Addition and subtraction operations evaluate last. If an expression contains several addition and subtraction operations, they’re applied from left-to-right. Addition and subtraction also have the same level of precedence.</p>&#13;
<p><a href="app01.xhtml#app01">Appendix A</a> contains the complete operator precedence chart. <strong>Caution:</strong> If you have an expression such as <code>(a + b) * (c - d)</code> in which two sets of parentheses are not nested, but appear “on the same level,” the C++ Standard does not specify the order in which these parenthesized subexpressions will evaluate.</p>&#13;
<h5 class="h5" id="ch02lev3sec29">Operator Grouping</h5>&#13;
<p>When we say that C++ applies certain operators from left-to-right, we are referring to the operators’ <span class="violet"><strong>grouping</strong></span>. For example, in the expression</p>&#13;
<pre class="pre">a + b + c</pre>&#13;
<p>the addition operators (<code>+</code>) group from left-to-right as if we parenthesized the expression as <code>(a+b)+ c</code>. Most C++ operators of the same precedence group left-to-right. We’ll see that some operators group right-to-left.</p>&#13;
<h3 class="h3" id="ch02lev1sec6"><span class="violet">2.6</span> Decision Making: Equality and Relational Operators</h3>&#13;
<p>We now introduce C++’s <code><strong><span class="violet">if</span></strong></code> <span class="violet"><strong>statement</strong></span>, which allows a program to take alternative action based on whether a <span class="violet"><strong>condition</strong></span> is true or false. Conditions in <code>if</code> statements can be formed by using the <span class="violet"><strong>relational operators</strong></span> and <span class="violet"><strong>equality operators</strong></span> in the following table:</p>&#13;
<div class="image"><img src="Images/p0118-01.jpg" alt="Images" width="826" height="359"/></div>&#13;
<p>The relational operators all have the same level of precedence and group left-to-right. The equality operators both have the same level of precedence, which is lower than that of the relational operators, and group left-to-right.</p>&#13;
<p>Reversing the order of the pair of symbols in the operators <code>!=</code>, <code>&gt;=</code> and <code>&lt;=</code> (by writing them as <code>=!</code>, <code>=&gt;</code> and <code>=&lt;</code>, respectively) is normally a syntax error. In some cases, writing <code>!=</code> as <code>=!</code> will not be a syntax error, but almost certainly will be a logic error that has an effect at execution time. You’ll understand why when we cover logical operators in <a href="ch04.xhtml#ch04">Chapter 4</a>.</p>&#13;
<h5 class="h5" id="ch02lev3sec30">Confusing <code>==</code> and <code>=</code></h5>&#13;
<p>Confusing the equality operator <code>==</code> with the assignment operator <code>=</code> results in logic errors. We like to read the equality operator as “is equal to” or “double equals,” and the assignment operator as “gets” or “gets the value of” or “is assigned the value of.” As you’ll see in <a href="ch04.xhtml#ch04lev1sec12">Section 4.12</a>, confusing these operators may not necessarily cause an easy-to-recognize syntax error, but may cause subtle logic errors.</p>&#13;
<h5 class="h5" id="ch02lev3sec31">Using the <code>if</code> Statement</h5>&#13;
<p><a href="ch02.xhtml#fig2_5">Figure 2.5</a> uses six <code>if</code> statements to compare two integers input by the user. If a given <code>if</code> statement’s condition is true, the output statement in the body of that <code>if</code> statement executes. If the condition is false, the output statement in the body does not execute.</p>&#13;
<div class="group" id="fig2_5">&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#aa02fig05" id="a02fig05">Click here to view code image</a></p>&#13;
<pre class="pre2"><strong><span class="cviolet"> 1</span></strong>  <span class="lgreen">// fig02_05.cpp</span>&#13;
<strong><span class="cviolet"> 2</span></strong>  <span class="lgreen">// Comparing integers using if statements, relational operators</span>&#13;
<strong><span class="cviolet"> 3</span></strong>  <span class="lgreen">// and equality operators.</span>&#13;
<strong><span class="cviolet"> 4</span></strong>  <span class="blue">#include</span> &lt;iostream&gt; <span class="lgreen">// enables program to perform input and output</span>&#13;
<strong><span class="cviolet"> 5</span></strong>&#13;
<strong><span class="cviolet"> 6</span></strong>  <span class="yell"><span class="blue">using</span> std::cout; <span class="lgreen">// program uses cout</span></span>&#13;
<strong><span class="cviolet"> 7</span></strong>  <span class="yell"><span class="blue">using</span> std::cin; <span class="lgreen">// program uses cin</span>  </span>&#13;
<strong><span class="cviolet"> 8</span></strong>  <span class="yell"><span class="blue">using</span> std::endl; <span class="lgreen">// program uses endl</span></span>&#13;
<strong><span class="cviolet"> 9</span></strong>&#13;
<strong><span class="cviolet">10</span></strong>   <span class="lgreen">// function main begins program execution</span>&#13;
<strong><span class="cviolet">11</span></strong>   <span class="blue">int</span> main() {&#13;
<strong><span class="cviolet">12</span></strong>      <span class="blue">int</span> number1{<span class="green">0</span>}; <span class="lgreen">// first integer to compare (initialized to 0)</span>&#13;
<strong><span class="cviolet">13</span></strong>      <span class="blue">int</span> number2{<span class="green">0</span>}; <span class="lgreen">// second integer to compare (initialized to 0)</span>&#13;
<strong><span class="cviolet">14</span></strong>&#13;
<strong><span class="cviolet">15</span></strong>      cout &lt;&lt; <span class="green">"Enter two integers to compare: "</span>; <span class="lgreen">// prompt user for data</span>&#13;
<strong><span class="cviolet">16</span></strong>      cin &gt;&gt; number1 &gt;&gt; number2; <span class="lgreen">// read two integers from user</span>&#13;
<strong><span class="cviolet">17</span></strong>&#13;
<strong><span class="cviolet">18</span></strong>      <span class="yell"><span class="blue">if</span> (number1 == number2) {                    </span>&#13;
<strong><span class="cviolet">19</span></strong>      <span class="yell">   cout &lt;&lt; number1 &lt;&lt; <span class="green">" == "</span> &lt;&lt; number2 &lt;&lt; endl;</span>&#13;
<strong><span class="cviolet">20</span></strong>      <span class="yell"><code>}</code>                                            </span>&#13;
<strong><span class="cviolet">21</span></strong>&#13;
<strong><span class="cviolet">22</span></strong>      <span class="blue">if</span> (number1 != number2) {&#13;
<strong><span class="cviolet">23</span></strong>         cout &lt;&lt; number1 &lt;&lt; <span class="green">" != "</span> &lt;&lt; number2 &lt;&lt; endl;&#13;
<strong><span class="cviolet">24</span></strong>      <code>}</code>&#13;
<strong><span class="cviolet">25</span></strong>&#13;
<strong><span class="cviolet">26</span></strong>      <span class="blue">if</span> (number1 &lt; number2) {&#13;
<strong><span class="cviolet">27</span></strong>         cout &lt;&lt; number1 &lt;&lt; <span class="green">" &lt; "</span> &lt;&lt; number2 &lt;&lt; endl;&#13;
<strong><span class="cviolet">28</span></strong>      <code>}</code>&#13;
<strong><span class="cviolet">29</span></strong>&#13;
<strong><span class="cviolet">30</span></strong>      <span class="blue">if</span> (number1 &gt; number2) {&#13;
<strong><span class="cviolet">31</span></strong>         cout &lt;&lt; number1 &lt;&lt; <span class="green">" &gt; "</span> &lt;&lt; number2 &lt;&lt; endl;&#13;
<strong><span class="cviolet">32</span></strong>      <code>}</code>&#13;
<strong><span class="cviolet">33</span></strong>&#13;
<strong><span class="cviolet">34</span></strong>      <span class="blue">if</span> (number1 &lt;= number2) {&#13;
<strong><span class="cviolet">35</span></strong>         cout &lt;&lt; number1 &lt;&lt; <span class="green">" &lt;= "</span> &lt;&lt; number2 &lt;&lt; endl;&#13;
<strong><span class="cviolet">36</span></strong>      <code>}</code>&#13;
<strong><span class="cviolet">37</span></strong>&#13;
<strong><span class="cviolet">38</span></strong>      <span class="blue">if</span> (number1 &gt;= number2) {&#13;
<strong><span class="cviolet">39</span></strong>         cout &lt;&lt; number1 &lt;&lt; <span class="green">" &gt;= "</span> &lt;&lt; number2 &lt;&lt; endl;&#13;
<strong><span class="cviolet">40</span></strong>      <code>}</code>&#13;
<strong><span class="cviolet">41</span></strong>   } <span class="lgreen">// end function main</span></pre>&#13;
<pre class="pre1"><code>Enter two integers to compare: <strong>3 7</strong></code>&#13;
<code>3 != 7&#13;
3 &lt; 7&#13;
3 &lt;= 7</code></pre>&#13;
<pre class="pre1"><code>Enter two integers to compare: <strong>22 12</strong></code>&#13;
<code>22 != 12&#13;
22 &gt; 12&#13;
22 &gt;= 12</code></pre>&#13;
<pre class="pre1"><code>Enter two integers to compare: <strong>7 7</strong></code>&#13;
<code>7 == 7&#13;
7 &lt;= 7&#13;
7 &gt;= 7</code></pre>&#13;
<p class="fig-caption"><span class="red"><strong>Fig. 2.5</strong></span> Comparing integers using <code>if</code> statements, relational operators and equality operators.</p>&#13;
</div>&#13;
<h5 class="h5" id="ch02lev3sec32"><code>using</code> Declarations</h5>&#13;
<p>Lines 6–8</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0032-01" id="f0032-01a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">using</span> std::cout; <span class="lgreen">// program uses cout</span>&#13;
<span class="blue">using</span> std::cin; <span class="lgreen">// program uses cin</span>&#13;
<span class="blue">using</span> std::endl; <span class="lgreen">// program uses endl</span></pre>&#13;
<p>are <code><strong><span class="violet">using</span></strong></code> <span class="violet"><strong>declarations</strong></span> that eliminate the need to repeat the <code>std::</code> prefix as we did in earlier programs. We can now write <code>cout</code> instead of <code>std::cout</code>, <code>cin</code> instead of <code>std::cin</code> and <code>endl</code> instead of <code>std::endl</code>, respectively, in the remainder of the program.</p>&#13;
<h5 class="h5" id="ch02lev3sec33"><code>using</code> Directive</h5>&#13;
<p>In place of lines 6–8, many programmers prefer the <code><strong><span class="violet">using</span></strong></code> <span class="violet"><strong>directive</strong></span></p>&#13;
<pre class="pre"><span class="blue">using namespace</span> std;</pre>&#13;
<p>which, when you include a C++ standard library header (such as <code>&lt;iostream&gt;</code>), enables your program to use any name from that header’s <code>std</code> namespace. From this point forward in the book, we’ll use this directive in our programs.<sup><a id="rch0fn1" href="ch01.xhtml#ch0fn1">1</a></sup></p>&#13;
<p class="footnote"><a id="ch0fn1" href="ch01.xhtml#rch0fn1">1</a>. In Chapter 23, Other Topics, we’ll discuss some issues with <code>using</code> directives in large-scale systems.</p>&#13;
<h5 class="h5" id="ch02lev3sec34">Variable Declarations and Reading the Inputs from the User</h5>&#13;
<p>Lines 12–13</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0032-02" id="f0032-02a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">int</span> number1{<span class="green">0</span>}; <span class="lgreen">// first integer to compare (initialized to 0)</span>&#13;
<span class="blue">int</span> number2{<span class="green">0</span>}; <span class="lgreen">// second integer to compare (initialized to 0)</span></pre>&#13;
<p>declare the variables used in the program and initialize them to <code>0</code>.</p>&#13;
<p>Line 16</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0032-03" id="f0032-03a">Click here to view code image</a></p>&#13;
<pre class="pre">cin &gt;&gt; number1 &gt;&gt; number2; <span class="lgreen">// read two integers from user</span></pre>&#13;
<p>uses cascaded stream extraction operations to input two integers. Recall that we’re allowed to write <code>cin</code> (instead of <code>std::cin</code>) because of line 7. First, a value is read into <code>number1</code>, then a value is read into <code>number2</code>.</p>&#13;
<h5 class="h5" id="ch02lev3sec35">Comparing Numbers</h5>&#13;
<p>The <code>if</code> statement in lines 18–20</p>&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#f0033-01" id="f0033-01a">Click here to view code image</a></p>&#13;
<pre class="pre"><span class="blue">if</span> (number1 == number2) {&#13;
   cout &lt;&lt; number1 &lt;&lt; <span class="green">" == "</span> &lt;&lt; number2 &lt;&lt; endl;&#13;
}</pre>&#13;
<p>determines whether the values of variables <code>number1</code> and <code>number2</code> are equal. If so, the <code>cout</code> statement displays a line of text indicating that the numbers are equal. For each condition that is <code>true</code> in the remaining <code>if</code> statements starting in lines 22, 26, 30, 34 and 38, the corresponding <code>cout</code> statement displays an appropriate line of text.</p>&#13;
<h5 class="h5" id="ch02lev3sec36">Braces and Blocks</h5>&#13;
<p>Each <code>if</code> statement in <a href="ch02.xhtml#fig2_5">Fig. 2.5</a> contains a single body statement that’s indented to enhance readability. Also, notice that we’ve enclosed each body statement in a pair of braces, <code>{ }</code>, creating what’s called a <span class="violet"><strong>compound statement</strong></span> or a <span class="violet"><strong>block</strong></span>.</p>&#13;
<p>You don’t need to use braces, <code>{ }</code>, around single-statement bodies, but you must include the braces around multiple-statement bodies. Forgetting to enclose multiple-statement bodies in braces leads to errors. To avoid errors, as a rule, always enclose an <code>if</code> statement’s body statement(s) in braces.</p>&#13;
<h5 class="h5" id="ch02lev3sec37">Common Logic Error: Placing a Semicolon After a Condition</h5>&#13;
<p>Placing a semicolon immediately after the right parenthesis of the condition in an <code>if</code> statement is often a logic error (although not a syntax error). The semicolon causes the body of the <code>if</code> statement to be empty, so the <code>if</code> statement performs no action, regardless of whether or not its condition is true. Worse yet, the original body statement of the <code>if</code> statement now becomes a statement in sequence with the <code>if</code> statement and always executes, often causing the program to produce incorrect results.</p>&#13;
<h5 class="h5" id="ch02lev3sec38">Splitting Lengthy Statements</h5>&#13;
<p>A lengthy statement may be spread over several lines. If a statement must be split across lines, choose meaningful breaking points, such as after a comma in a comma-separated list, or after an operator in a lengthy expression. If a statement is split across two or more lines, indent all subsequent lines and left-align the group of indented lines.</p>&#13;
<h5 class="h5" id="ch02lev3sec39">Operator Precedence and Grouping</h5>&#13;
<p>With the exception of the assignment operator <code>=</code>, all the operators presented in this chapter group from left-to-right. Assignments (<code>=</code>) group from right-to-left. So, an expression such as <code>x = y = 0</code> evaluates as if it had been written <code>x = (y = 0)</code>, which first assigns <code>0</code> to <code>y</code>, then assigns the result of that assignment (that is, <code>0</code>) to <code>x</code>.</p>&#13;
<p>Refer to the complete operator precedence chart in <a href="app01.xhtml#app01">Appendix A</a> when writing expressions containing many operators. Confirm that the operators in the expression are performed in the order you expect. If you’re uncertain about the order of evaluation in a complex expression, break the expression into smaller statements or use parentheses to force the order of evaluation, exactly as you’d do in an algebraic expression.</p>&#13;
<h3 class="h3" id="ch02lev1sec7"><span class="violet">2.7</span> Objects Natural: Creating and Using Objects of Standard Library Class <code>string</code></h3>&#13;
<p>Throughout this book, we emphasize using preexisting valuable classes from the C++ standard library and various open-source libraries from the C++ open-source community. You’ll focus on knowing what libraries are out there, choosing the ones you’ll need for your applications, creating objects from existing library classes and making those objects exercise their capabilities. By Objects Natural, we mean that you’ll be able to program with powerful objects before you learn to create custom classes</p>&#13;
<p>You’ve already worked with C++ objects—specifically the <code>cout</code> and <code>cin</code> objects, which encapsulate the mechanisms for output and input, respectively. These objects were created for you behind the scenes using classes from the header <code>&lt;iostream&gt;</code>. In this section, you’ll create and interact with objects of the C++ standard library’s <code><strong><span class="violet">string</span></strong></code><sup><a id="rch0fn2" href="ch01.xhtml#ch0fn2">2</a></sup> class.</p>&#13;
<p class="footnote"><a id="ch0fn2" href="ch01.xhtml#rch0fn2">2</a>. You’ll learn additional <code>string</code> capabilities in subsequent chapters. <a href="ch08.xhtml#ch08">Chapter 8</a> discusses class <code>string</code> in detail, test-driving many more of its member functions.</p>&#13;
<h5 class="h5" id="ch02lev3sec40">Test-Driving Class <code>string</code></h5>&#13;
<p>Classes cannot execute by themselves. A <code>Person</code> object can drive a <code>Car</code> object by telling it what to do (go faster, go slower, turn left, turn right, etc.)—without knowing how the car’s internal mechanisms work. Similarly, the <code>main</code> function can “drive” a <code>string</code> object by calling its member functions—without knowing how the class is implemented. In this sense, <code>main</code> in the following program is referred to as a <span class="violet"><strong>driver program</strong></span>. <a href="ch02.xhtml#fig2_6">Figure 2.6</a>’s <code>main</code> function test-drives several <code>string</code> member functions.</p>&#13;
<div class="group" id="fig2_6">&#13;
<p class="codelink"><a href="Images/ch02_images.xhtml#aa02fig06" id="a02fig06">Click here to view code image</a></p>&#13;
<pre class="pre2"><strong><span class="cviolet"> 1</span></strong>  <span class="lgreen">// fig02_06.cpp</span>&#13;
<strong><span class="cviolet"> 2</span></strong>  <span class="lgreen">// Standard Library string class test program.</span>&#13;
<strong><span class="cviolet"> 3</span></strong>  <span class="blue">#include</span> &lt;iostream&gt;&#13;
<strong><span class="cviolet"> 4</span></strong>  <span class="blue">#include</span> &lt;string&gt;&#13;
<strong><span class="cviolet"> 5</span></strong>  <span class="blue">using namespace</span> std;&#13;
<strong><span class="cviolet"> 6</span></strong>&#13;
<strong><span class="cviolet"> 7</span></strong>  <span class="blue">int</span> main() {&#13;
<strong><span class="cviolet"> 8</span></strong>     <span class="yell">string s1{<span class="green">"happy"</span>};                  </span>&#13;
<strong><span class="cviolet"> 9</span></strong>     <span class="yell">string s2{<span class="green">" birthday"</span>};              </span>&#13;
<strong><span class="cviolet">10</span></strong>     <span class="yell">string s3; <span class="lgreen">// creates an empty string</span></span>&#13;
<strong><span class="cviolet">11</span></strong>&#13;
<strong><span class="cviolet">12</span></strong>     <span class="lgreen">// display the strings and show their lengths (length is C++20)</span>&#13;
<strong><span class="cviolet">13</span></strong>     cout &lt;&lt; <span class="green">"s1: \""</span> &lt;&lt; s1 &lt;&lt; <span class="green">"\"; length: "</span> &lt;&lt; <span class="yell">s1.length()</span>&#13;
<strong><span class="cviolet">14</span></strong>        &lt;&lt; <span class="green">"\ns2: \""</span> &lt;&lt; s2 &lt;&lt; <span class="green">"\"; length: "</span> &lt;&lt; <span class="yell">s2.length()</span>&#13;
<strong><span class="cviolet">15</span></strong>        &lt;&lt; <span class="green">"\ns3: \""</span> &lt;&lt; s3 &lt;&lt; <span class="green">"\"; length: "</span> &lt;&lt; <span class="yell">s3.length()</span>;&#13;
<strong><span class="cviolet">16</span></strong>&#13;
<strong><span class="cviolet">17</span></strong>     <span class="lgreen">// compare strings with == and !=</span>&#13;
<strong><span class="cviolet">18</span></strong>     cout &lt;&lt; <span class="green">"\n\nThe results of comparing s2 and s1:"</span> &lt;&lt; <span class="yell">boolalpha</span>&#13;
<strong><span class="cviolet">19</span></strong>        &lt;&lt; <span class="green">"\ns2 == s1: "</span> &lt;&lt; (s2 == s1)&#13;
<strong><span class="cviolet">20</span></strong>        &lt;&lt; <span class="green">"\ns2 != s1: "</span> &lt;&lt; (s2 != s1);&#13;
<strong><span class="cviolet">21</span></strong>&#13;
<strong><span class="cviolet">22</span></strong>     <span class="lgreen">// test string member function empty</span>&#13;
<strong><span class="cviolet">23</span></strong>     cout &lt;&lt; <span class="green">"\n\nTesting s3.empty():\n"</span>;&#13;
<strong><span class="cviolet">24</span></strong>&#13;
<strong><span class="cviolet">25</span></strong>     <span class="blue">if</span> (<span class="yell">s3.empty()</span>) {&#13;
<strong><span class="cviolet">26</span></strong>        cout &lt;&lt; <span class="green">"s3 is empty; assigning to s3;\n"</span>;&#13;
<strong><span class="cviolet">27</span></strong>        <span class="yell">s3 = s1 + s2; <span class="lgreen">// assign s3 the result of concatenating s1 and s2</span></span>&#13;
<strong><span class="cviolet">28</span></strong>        cout &lt;&lt; <span class="green">"s3: \""</span> &lt;&lt; s3 &lt;&lt; <span class="green">"\""</span>;&#13;
<strong><span class="cviolet">29</span></strong>     <code>}</code>&#13;
<strong><span class="cviolet">30</span></strong>&#13;
<strong><span class="cviolet">31</span></strong>     <span class="lgreen">// testing new C++20 string member functions</span>&#13;
<strong><span class="cviolet">32</span></strong>     cout &lt;&lt; <span class="green">"\n\ns1 starts with \"ha\": "</span> &lt;&lt; <span class="yell">s1.starts_with(<span class="green">"ha"</span>)</span> &lt;&lt; endl;&#13;
<strong><span class="cviolet">33</span></strong>     cout &lt;&lt; <span class="green">"s2 starts with \"ha\": "</span> &lt;&lt; <span class="yell">s2.starts_with(<span class="green">"ha"</span>)</span> &lt;&lt; endl;&#13;
<strong><span class="cviolet">34</span></strong>     cout &lt;&lt; <span class="green">"s1 ends with \"ay\": "</span> &lt;&lt; <span class="yell">s1.ends_with(<span class="green">"ay"</span>)</span> &lt;&lt; endl;&#13;
<strong><span class="cviolet">35</span></strong>     cout &lt;&lt; <span class="green">"s2 ends with \"ay\": "</span> &lt;&lt; <span class="yell">s2.ends_with(<span class="green">"ay"</span>)</span> &lt;&lt; endl;&#13;
<strong><span class="cviolet">36</span></strong>   <code>}</code></pre>&#13;
<pre class="pre1">s1: "happy"; length: 5&#13;
s2: " birthday"; length: 9&#13;
s3: ""; length: 0&#13;
&#13;
The results of comparing s2 and s1:&#13;
s2 == s1: false&#13;
s2 != s1: true&#13;
&#13;
Testing s3.empty():&#13;
s3 is empty; assigning to s3;&#13;
s3: "happy birthday"&#13;
&#13;
s1 starts with "ha": true&#13;
s2 starts with "ha": false&#13;
s1 ends with "ay": false&#13;
s2 ends with "ay": true</pre>&#13;
<p class="fig-caption"><span class="red"><strong>Fig. 2.6</strong></span> Standard Library <code>string</code> class test program.</p>&#13;
</div>&#13;
<h5 class="h5" id="ch02lev3sec41">Instantiating Objects</h5>&#13;
<p>Typically, you cannot call a member function of a class until you create an object of that class<sup><a id="rch0fn3" href="ch01.xhtml#ch0fn3">3</a></sup>—also called instantiating an object. Lines 8–10 create three <code>string</code> objects:</p>&#13;
<p class="bull">• <code>s1</code> is initialized with the string literal <code>"happy"</code>,</p>&#13;
<p class="bull">• <code>s2</code> is initialized with the string literal <code>" birthday"</code> and</p>&#13;
<p class="bull">• <code>s3</code> is initialized by default to the <span class="violet"><strong>empty</strong></span> <code><strong><span class="violet">string</span></strong></code> (that is, <code>""</code>).</p>&#13;
<p class="footnote"><a id="ch0fn3" href="ch01.xhtml#rch0fn3">3</a>. You’ll see in Section 11.15 that you can call a class’s <code>static</code> member functions without creating an object of that class.</p>&#13;
<p>When we declare <code>int</code> variables, as we did earlier, the compiler knows what <code>int</code> is—it’s a fundamental type that’s built into C++. In lines 8–10, however, the compiler does not know in advance what type <code>string</code> is—it’s a class type from the C++ standard library.</p>&#13;
<p>When packaged properly, classes can be reused by other programmers. This is one of the most significant benefits of working with object-oriented programming languages like C++ that have rich libraries of powerful prebuilt classes. For example, you can reuse the C++ standard library’s classes in any program by including the appropriate headers—in this case, the <code><strong><span class="violet">&lt;string&gt;</span></strong></code> <span class="violet"><strong>header</strong></span> (line 4). The name <code>string</code>, like the name <code>cout</code>, belongs to namespace <code>std</code>.</p>&#13;
<h5 class="h5" id="ch02lev3sec42">C++20 <code>string</code> Member Function <code>length</code></h5>&#13;
<p><span class="size">20</span> Lines 13–15 output each <code>string</code> and its length. The <code>string</code> class’s <code><strong><span class="violet">length</span></strong></code> <span class="violet"><strong>member function</strong></span> (new in C++20) returns the number of characters stored in a particular <code>string</code> object. In line 13, the expression</p>&#13;
<pre class="pre">s1.length()</pre>&#13;
<p>returns <code>s1</code>’s length by calling the object’s <code>length</code> member function. To call this member function for a specific object, you specify the object’s name (<code>s1</code>), followed by the <span class="violet"><strong>dot operator</strong></span> (<code><strong><span class="violet">.</span></strong></code>), then the member function name (<code>length</code>) and a set of parentheses. <em>Empty</em> paren-theses indicate that <code>length</code> does not require any additional information to perform its task. Soon, you’ll see that some member functions require additional information called arguments to perform their tasks.</p>&#13;
<p>From <code>main</code>’s view, when the <code>length</code> member function is called:</p>&#13;
<p class="num"><span class="red"><strong>1.</strong></span> The program transfers execution from the call (line 13 in <code>main</code>) to member function <code>length</code>. Because <code>length</code> was called via the <code>s1</code> object, <code>length</code> “knows” which object’s data to manipulate.</p>&#13;
<p class="num"><span class="red"><strong>2.</strong></span> Next, member function <code>length</code> performs its task—that is, it returns <code>s1</code>’s length to line 13 where the function was called. The <code>main</code> function does not know the details of how <code>length</code> performs its task, just as the driver of a car doesn’t know the details of how engines, transmissions, steering mechanisms and brakes are implemented.</p>&#13;
<p class="num"><span class="red"><strong>3.</strong></span> The <code>cout</code> object displays the number of characters returned by member function <code>length</code>, then the program continues executing, displaying the <code>string</code>s <code>s2</code> and <code>s3</code> and their lengths.</p>&#13;
<h5 class="h5" id="ch02lev3sec43">Comparing <code>string</code> Objects with the Equality Operators</h5>&#13;
<p>Like numbers, <code>string</code>s can be compared with one another. Lines 18–20 show the results of comparing <code>s2</code> to <code>s1</code> using the equality operators—<code>string</code> comparisons are case sensitive.<sup><a id="rch0fn4" href="ch02.xhtml#ch0fn4">4</a></sup></p>&#13;
<p class="footnote"><a id="ch0fn4" href="ch02.xhtml#rch0fn4">4</a>. In <a href="ch08.xhtml#ch08">Chapter 8</a>, you’ll see that strings perform lexicographical comparisons using the numerical values of the characters in each string.</p>&#13;
<p>Normally, when you output a condition’s value, C++ displays <code>0</code> for false or <code>1</code> for true. The stream manipulator <code><strong><span class="violet">boolalpha</span></strong></code> (line 18) from the <code>&lt;iostream&gt;</code> header tells the output stream to display condition values as the words <code>false</code> or <code>true</code>.</p>&#13;
<h5 class="h5" id="ch02lev3sec44"><code>string</code> Member Function <code>empty</code></h5>&#13;
<p>Line 25 calls <code>string</code> member function <code><strong><span class="violet">empty</span></strong></code>, which returns <code>true</code> if the <code>string</code> is empty; otherwise, it returns <code>false</code>. The object <code>s3</code> was initialized by default to the empty string, so it is indeed empty, and the body of the <code>if</code> statement will execute.</p>&#13;
<h5 class="h5" id="ch02lev3sec45"><code>string</code> Concatenation and Assignment</h5>&#13;
<p>Line 27 assigns a new value to <code>s3</code> produced by “adding” the strings <code>s1</code> and <code>s2</code> using the + operator—this is known as <code><strong><span class="violet">string</span></strong></code> <span class="violet"><strong>concatenation</strong></span>. After the assignment, <code>s3</code> contains the characters of <code>s1</code> followed by the characters of <code>s2</code>. Line 28 outputs <code>s3</code> to demonstrate that the assignment worked correctly.</p>&#13;
<h5 class="h5" id="ch02lev3sec46">C++20 <code>string</code> Member Functions <code>starts_with</code> and <code>ends_with</code></h5>&#13;
<p><span class="size">20</span> Lines 32–35 demonstrate new <code>string</code> member functions <code><strong><span class="violet">starts_with</span></strong></code> and <code><strong><span class="violet">ends_with</span></strong></code>, which return <code>true</code> if the <code>string</code> starts with or ends with a specified substring, respectively; otherwise, they return <code>false</code>. Lines 32 and 33 show that <code>s1</code> starts with <code>"ha"</code>, but <code>s2</code> does not. Lines 34 and 35 show that <code>s1</code> does not end with <code>"ay"</code> but <code>s2</code> does.</p>&#13;
<h3 class="h3" id="ch02lev1sec8"><span class="violet">2.8</span> Wrap-Up</h3>&#13;
<p>We presented many important basic features of C++ in this chapter, including displaying data on the screen, inputting data from the keyboard and declaring variables of fundamental types. In particular, you learned to use the output stream object <code>cout</code> and the input stream object <code>cin</code> to build simple interactive programs. We declared and initialized variables and used arithmetic operators to perform calculations. We discussed the order in which C++ applies operators (i.e., the rules of operator precedence), as well as the grouping of the operators. You saw how C++’s <code>if</code> statement allows a program to make decisions. We introduced the equality and relational operators, which we used to form conditions in <code>if</code> statements.</p>&#13;
<p>Finally, we introduced the notion of “objects natural” learning by creating objects of the C++ standard library class <code>string</code> and interacting with them using equality operators and <code>string</code> member functions. In subsequent chapters, you’ll create and use many objects of existing classes to accomplish significant tasks with minimal amounts of code. Then, in <a href="ch10.xhtml#ch10">Chapters 10</a>–<a href="ch14.xhtml#ch14">14</a>, you’ll create your own custom classes. You’ll see that C++ enables you to “craft valuable classes.” In the next chapter, we begin our introduction to control statements, which specify the order in which a program’s actions are performed.</p>&#13;
</div></body>
</html>